export const executionManagementSystemQuiz = [
  {
    id: 'execution-management-system-q-1',
    question:
      'Design a production-grade "VWAP execution algorithm" that executes a 100,000 share order over 6 hours. Your design should include: (1) Historical volume profile analysis (which hours have highest volume), (2) Dynamic slice adjustment (adapt to real-time volume), (3) Limit price strategy (don\'t chase the market), (4) Handling partial fills and cancellations, (5) Performance measurement (compare execution VWAP to market VWAP), (6) Risk management (stop if price moves against you >2%).',
    sampleAnswer:
      "Production VWAP Algorithm Design: **Historical Volume Profile**: Analyze past 20 trading days for symbol: 9:30-10:30: 8% of daily volume, 10:30-11:30: 12%, 11:30-12:30: 15%, 12:30-1:30: 18% (peak), 1:30-2:30: 16%, 2:30-3:30: 14%, 3:30-4:00: 17% (close spike). Calculate target slices: Total order: 100,000 shares, Slice 1 (9:30-10:30): 8,000 shares (8%), Slice 2: 12,000 shares, ..., Slice 6: 17,000 shares. Store as execution schedule with target quantities and times. **Dynamic Slice Adjustment**: Monitor real-time volume vs historical: If current volume > 120% of historical → increase slice size (take advantage of liquidity). If current volume < 80% of historical → decrease slice size (avoid moving market). Example: Slice 2 target: 12,000 shares. Historical 10:30-11:30 volume: 1.2M shares, Actual volume at 11:00: 800K (67% of expected) → reduce target to 8,000 shares (67% of 12K). Carry forward unexecuted quantity to next slice. **Limit Price Strategy**: Never use market orders (avoid slippage). Place limit orders at microprice: Microprice = bid + (ask-bid) × (bid_size / (bid_size + ask_size)). Example: Bid $150.00 (5000), Ask $150.01 (3000) → microprice = $150.00 + $0.01 × (5000/8000) = $150.00625. Place buy limit at $150.0062 (between NBBO). Cancel and replace if not filled within 5 seconds (move to current microprice). Maximum 10 replacements per slice (prevent chasing). **Handling Partial Fills**: Track fills per slice: Slice target: 12,000 shares, Placed order: 12,000 @ $150.00 LIMIT, Fill 1: 5,000 @ $150.00, Fill 2: 3,000 @ $150.00, Remaining: 4,000 shares (carry to next slice). Update running average: Old filled: 50,000 @ $149.95, New fills: 8,000 @ $150.00, New average: (50,000×$149.95 + 8,000×$150.00) / 58,000 = $149.96. **Cancellations**: End of slice: Cancel unfilled portion of order (don't let it sit). Reason: Market conditions change, don't want stale order. Aggregate unfilled across slices, accelerate next slice if behind schedule. Example: Slice 1 unfilled: 2,000, Slice 2 unfilled: 3,000 → Slice 3 target: 15,000 + 5,000 = 20,000 shares (catch up). **Performance Measurement**: Calculate execution VWAP: Execution VWAP = Σ(fill_qty × fill_price) / total_filled. Example: 100,000 shares filled, total cost $15,000,000 → VWAP = $150.00. Get market VWAP (from tick data): Σ(market_volume × market_price) / total_market_volume over 6 hours. Benchmark: VWAP slippage = Execution VWAP - Market VWAP. Target: <1 bp (0.01%) slippage. Example: Market VWAP $150.02, execution $150.00 → 2 bps IMPROVEMENT (good!). **Risk Management**: Monitor unrealized P&L during execution: Start price: $150.00 (beginning of VWAP), Current price: $154.00 (up 2.67%), Executed: 60,000 shares @ avg $151.00, Remaining: 40,000 shares. Unrealized P&L on remaining: 40,000 × ($154.00 - $151.00) = +$120,000. Risk rule: If price moves >2% against order → STOP EXECUTION. Example (buy order): Start: $150, Current: $147 (down 2%) → STOP (price running away). Close out remaining with market order or cancel (strategy decision). **Edge Cases**: Market halt: Cancel all orders, wait for resume, restart with adjusted schedule. Low liquidity: Extend execution window (6 hours → 8 hours), reduce slice sizes. High volatility: Widen limit (microprice ± 5 bps instead of exact), accept more slippage for completion. **Implementation Pseudocode**: class VWAPAlgo: schedule = generate_schedule(100000, volume_profile), for slice in schedule: target_qty = slice.quantity, filled_qty = 0, while filled_qty < target_qty and time_in_slice: current_volume = get_market_volume(), adjusted_qty = adjust_for_volume(target_qty, current_volume), limit_price = calculate_microprice(), place_order(adjusted_qty, limit_price), wait_for_fills(5_seconds), filled_qty += sum(fills), cancel_unfilled_orders(), check_risk_stop(current_price).",
    keyPoints: [
      'Volume profile: Analyze 20 days history, slice by hour (8%, 12%, 15%, 18%, 16%, 14%, 17%); peak at 12:30-1:30',
      'Dynamic adjustment: Real-time volume vs historical (>120% increase slice, <80% decrease); carry forward unfilled to next slice',
      'Limit orders: Use microprice (bid + spread × bid_size/total_size), cancel/replace every 5s, max 10 replacements per slice',
      'Performance: Execution VWAP vs market VWAP benchmark; target <1 bp slippage; measure per slice and total',
      'Risk stop: If price moves >2% against order direction → stop execution; close out or cancel remaining',
    ],
  },
  {
    id: 'execution-management-system-q-2',
    question:
      'Compare VWAP vs TWAP vs POV execution algorithms for a large order. For each: (1) When to use (market conditions, order characteristics), (2) Advantages and disadvantages, (3) Expected slippage and market impact, (4) Customization parameters, (5) Performance benchmarks. Provide a decision tree for choosing the right algorithm.',
    sampleAnswer:
      "Execution Algorithm Comparison: **VWAP (Volume-Weighted Average Price)**: Goal: Match market volume pattern over time. Use when: Need to execute with market (blend in), benchmark is VWAP (performance measured against it), moderate urgency (4-6 hours window). Example: Institutional buy 100K shares AAPL over trading day. Advantages: Low market impact (matches natural volume), predictable execution (follows schedule), easy to measure performance (vs market VWAP). Disadvantages: Slow (takes full time window), inflexible (locked to schedule), may miss opportunities (price drops, can't accelerate). Parameters: Start/end time (9:30-16:00), volume profile (historical or custom), price limits (max/min acceptable). Slippage: 1-3 bps typical, market impact low (distributed over time). Benchmark: Market VWAP over same period. **TWAP (Time-Weighted Average Price)**: Goal: Execute evenly over time (ignore volume). Use when: Thin/illiquid stocks (volume profile unreliable), want even participation (regulatory reporting), overnight/off-hours execution. Example: Trade small-cap stock, uncertain volume pattern. Advantages: Simple (equal slices), predictable timing (every X minutes), works in low liquidity (doesn't rely on volume). Disadvantages: Can't adapt to volume spikes (may miss liquidity), higher impact in quiet periods (no natural volume to hide in), worse than VWAP in liquid stocks. Parameters: Start/end time, number of slices (10-50 typical), slice duration (5-30 min). Slippage: 3-5 bps typical (worse than VWAP), market impact moderate. Benchmark: Time-weighted price (TWAP). **POV (Percentage of Volume / Participation Rate)**: Goal: Execute as fixed % of market volume (typically 5-20%). Use when: Need to scale with market (adaptive), large order in volatile market, want to complete within certain volume (e.g., before close). Example: Urgently buy 500K shares, want 10% of market volume. Advantages: Adaptive (speeds up/slows with market), flexible (can change participation rate), better in volatile markets (more aggressive when liquid). Disadvantages: Unpredictable timing (depends on market volume), can't guarantee completion (if market volume low), higher impact (taking fixed % every period). Parameters: Target participation % (5-20%), max order rate (shares/min), completion target (% of order or time). Slippage: 5-10 bps typical (higher), market impact high (taking fixed % → visible). Benchmark: Arrival price or VWAP. **Decision Tree**: Q1: Is order urgent (need completion ASAP)? Yes → POV (high participation rate 15-20%), No → continue. Q2: Is stock liquid (ADV > 1M shares)? Yes → continue, No → TWAP (volume unreliable). Q3: Is there strong volume pattern? Yes → VWAP (match pattern), No → TWAP (even execution). Q4: Is benchmark VWAP? Yes → VWAP algorithm, No → TWAP or POV. **Example Scenarios**: Scenario 1: Institutional asset manager, buy 100K AAPL (liquid), 6-hour window, benchmark VWAP → Use VWAP. Scenario 2: Hedge fund, buy 10K shares small-cap (illiquid $5M ADV), no urgency → Use TWAP. Scenario 3: Prop trader, buy 500K shares tech stock (volatile), need completion before close (2 hours) → Use POV (15% participation). Scenario 4: Quant fund, rebalance 50 stocks, equal priority, 4-hour window → Use TWAP (simple, predictable). **Performance Comparison (empirical)**: VWAP: Slippage 1-3 bps, completion 95%+, market impact low. TWAP: Slippage 3-5 bps, completion 95%+, market impact moderate. POV: Slippage 5-10 bps, completion 70-90% (depends on market volume), impact high. **Customization**: VWAP custom: Adjust volume profile (emphasize open/close), limit order aggressiveness (microprice vs bid/ask), max participation per slice (don't exceed 20%). TWAP custom: Vary slice sizes (larger at open/close), randomize timing (±1 min), adaptive TWAP (combine with volume monitoring). POV custom: Dynamic participation (start 10%, increase to 20% if behind), volume forecast (predict upcoming volume), time limits (stop if not completed by T). **Hybrid Strategies**: VWAP with POV cap: Follow VWAP schedule but limit to 15% participation (don't dominate small volumes). TWAP with VWAP profile: Use VWAP volume weights but TWAP timing (best of both). Adaptive algo: Start VWAP, switch to POV if behind schedule, switch to TWAP if low volume detected.",
    keyPoints: [
      'VWAP: Match market volume pattern, use for liquid stocks with clear volume profile; 1-3 bps slippage, low impact',
      'TWAP: Even execution over time, use for illiquid stocks or when volume unpredictable; 3-5 bps slippage, moderate impact',
      'POV: Fixed % of market volume, use for urgent orders or volatile markets; 5-10 bps slippage, high impact but adaptive',
      'Decision tree: Urgent? → POV. Liquid + volume pattern? → VWAP. Illiquid or no pattern? → TWAP',
      'Hybrid strategies: VWAP with POV cap, TWAP with VWAP profile, adaptive switching based on conditions',
    ],
  },
  {
    id: 'execution-management-system-q-3',
    question:
      'Design a "smart order routing (SOR) engine" that routes orders to multiple venues (NYSE, NASDAQ, BATS, IEX). Include: (1) NBBO calculation and order protection (Reg NMS), (2) Venue scoring (price, liquidity, latency, fees), (3) Order splitting for large orders, (4) Dark pool routing strategy, (5) Fill aggregation and reporting, (6) Performance metrics (fill rate, price improvement, effective spread).',
    sampleAnswer:
      'Smart Order Routing Engine Design: **NBBO Calculation**: Subscribe to SIP feed (Securities Information Processor): Receive quotes from all exchanges in real-time, each quote: (venue, symbol, bid, bid_size, ask, ask_size, timestamp). Calculate NBBO: National Best Bid = max(all_venue_bids), National Best Offer = min(all_venue_asks). Example: NYSE: $150.00 bid, $150.01 ask, NASDAQ: $150.00 bid, $150.01 ask, BATS: $149.99 bid, $150.02 ask → NBBO: $150.00 bid (NYSE/NASDAQ), $150.01 ask (NYSE/NASDAQ). Update NBBO on every quote change (sub-millisecond). Reg NMS Order Protection: Cannot trade through NBBO (Rule 611), must route to venue(s) offering NBBO, exception: ISO orders (Intermarket Sweep Order). Example: Buy order arrives, NBBO ask $150.01 (NYSE), cannot send to BATS at $150.02 (violation). **Venue Scoring System**: Score each venue for order routing decision: Score = (price_factor × 1000) + (liquidity_factor × 100) - (latency_ms × 10) - (fee_cost × 100). Price factor: Venues at NBBO = 1.0, away from NBBO = 0 (excluded). Liquidity factor: Available shares at NBBO / 1000. Latency: Measured ack time (NYSE 2ms, NASDAQ 1.5ms, BATS 2.5ms). Fee: Maker/taker fee in dollars per share. Example calculation (buy order): NYSE: price=1.0, liquidity=5000/1000=5, latency=2, fee=0.003 taker → score = 1000 + 500 - 20 - 0.3 = 1479.7. NASDAQ: 1.0, 4, 1.5, 0.003 → score = 1000 + 400 - 15 - 0.3 = 1384.7. BATS: 0 (not at NBBO), excluded. Winner: NYSE (highest score). **Order Splitting for Large Orders**: Query order book depth at each venue: NYSE: 5000 shares at NBBO ask, NASDAQ: 4000 shares, IEX: 2000 shares. Total available: 11,000 shares at NBBO. Order: 15,000 shares, split strategy: Route to all venues at NBBO (11,000 shares total): NYSE: 5,000 (max available), NASDAQ: 4,000, IEX: 2,000. Remaining: 4,000 shares → route to dark pools (hidden liquidity) or wait for NBBO to replenish. Proportional split alternative: Route proportional to liquidity %: NYSE: 15,000 × (5000/11000) = 6,818 shares (exceeds available, cap at 5,000). Implementation: def split_order(quantity, venue_liquidity): total_liquidity = sum(venue_liquidity.values()), splits = {}, for venue, available in venue_liquidity.items(): proportion = available / total_liquidity, target = quantity × proportion, splits[venue] = min(target, available), return splits. **Dark Pool Routing Strategy**: Dark pools: Hidden liquidity, no displayed quotes, lower market impact. Major dark pools: Liquidnet, ITG POSIT, Credit Suisse CrossFinder. Routing logic: Try lit venues first (price discovery), if order >10,000 shares AND want to minimize impact → route portion to dark pool. Typical allocation: 70% lit venues (price priority), 30% dark pool (size/stealth). Example: Order 20,000 shares, Route 14,000 to lit venues (NYSE, NASDAQ at NBBO), Route 6,000 to dark pool (IOI - Indication of Interest). Monitor dark pool fill rate: If <20% fill rate → reduce dark pool allocation, if >40% → increase (good hidden liquidity). **Fill Aggregation**: Track fills from multiple venues: Order ID: ORD-12345, Venue A: Fill 3,000 @ $150.01, Venue B: Fill 2,500 @ $150.01, Dark Pool: Fill 1,500 @ $150.00. Aggregate: Total filled: 7,000 shares, Average price: (3000×$150.01 + 2500×$150.01 + 1500×$150.00) / 7000 = $150.0079. Report single aggregated fill to client: Fill: 7,000 @ $150.0079, breakdown by venue (for TCA). **Performance Metrics**: Fill Rate: filled_qty / total_qty × 100. Target: >98% (should nearly always complete at NBBO). By venue: NYSE 99%, NASDAQ 98%, BATS 97%, Dark Pool 35% (expected). Price Improvement: filled_price vs NBBO at order time. Example: Order at NBBO ask $150.01, filled at $150.00 (dark pool) → 1 cent improvement. Metric: Improvement rate: % of orders with improvement, avg improvement: (NBBO - fill_price) per share. Effective Spread: 2 × |fill_price - midpoint|. Midpoint = (bid + ask) / 2. Example: Bid $150.00, Ask $150.01, midpoint $150.005, fill $150.01 → spread = 2 × $0.005 = 1 cent (or 0.67 bps). Venue Latency: Time from order submit to ack/fill. Target: <5ms total (includes network + venue). Track per venue: NYSE 2.5ms, NASDAQ 2.0ms, BATS 3.0ms. Routing Accuracy: % orders routed to optimal venue. Post-analysis: Did venue with highest score actually give best fill? If not, adjust scoring weights. **Implementation**: class SmartOrderRouter: def route_order(symbol, side, quantity): nbbo = calculate_nbbo(symbol), venues_at_nbbo = filter_by_nbbo(nbbo, side), scores = {v: score_venue(v, symbol, side) for v in venues_at_nbbo}, if quantity > threshold: splits = split_order(quantity, venue_liquidity), route_to_multiple_venues(splits), else: best_venue = max(scores, key=scores.get), route_to_single_venue(best_venue, quantity), track_fills_and_aggregate(), calculate_performance_metrics().',
    keyPoints: [
      'NBBO: Calculate from all venue quotes; Reg NMS requires routing to venues at NBBO (cannot trade through better price)',
      'Venue scoring: Price (1000×), liquidity (100×), latency (-10×), fees (-100×); highest score wins for single-venue routing',
      'Order splitting: Large orders split across venues proportional to available liquidity at NBBO; cap at actual availability',
      'Dark pools: Route 30% of large orders (>10K shares) for stealth; monitor fill rate 20-40% typical',
      'Performance: Fill rate >98%, price improvement vs NBBO, effective spread <0.5 bps, latency <5ms total',
    ],
  },
];
