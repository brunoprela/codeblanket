export const readingFinancialNewsDataQuiz = [
    {
        id: 'rfnd-q-1',
        question:
            'Build an automated earnings alert system: (1) Monitor SEC EDGAR for 8-K filings (Item 2.02 = earnings release), (2) Parse filing for EPS, revenue, guidance, (3) Compare to analyst estimates (fetch from Alpha Vantage or FinancialModelingPrep), (4) Classify as beat/miss/inline, (5) Send alerts (email, Slack, SMS) within seconds of filing. Include NLP for parsing unstructured text (XBRL for structured data). How do you handle: pre-market vs after-hours filings? Multiple earnings dates (preliminary vs final)? Non-GAAP adjustments? Scale to monitor 500+ companies?',
        sampleAnswer: `Earnings alert system: SEC EDGAR monitoring: poll RSS feed (sec.gov/cgi-bin/browse-edgar?action=getcurrent&CIK=&type=8-K&company=&dateb=&owner=exclude&start=0&count=100&output=atom) every 60 seconds, parse XML for new 8-K filings, filter for Item 2.02 (Results of Operations and Financial Condition), download filing HTML/XBRL, extract accession number for direct link, Filing parsing: if XBRL available: parse structured data (us-gaap:EarningsPerShareBasic, us-gaap:Revenues, us-gaap:NetIncomeLoss) using xbrl library, if only HTML/text: NLP extraction with regex patterns (EPS.*\\$([0-9.]+), Revenue.*\\$([0-9.]+B?)), use spaCy NER (named entity recognition) to extract financial figures, look for guidance section (keywords: "outlook", "expects", "forecasts"), Analyst estimates: pre-fetch consensus estimates from APIs (Alpha Vantage /EARNINGS endpoint, FinancialModelingPrep /analyst-estimates, Yahoo Finance Earnings Calendar), store in database with expected_eps, expected_revenue, update weekly, Classification: beat = actual >= (estimate + 0.01), miss = actual < (estimate - 0.01), inline = within 1% of estimate, calculate beat_amount = actual - estimate, beat_pct = (actual - estimate) / estimate, Alert delivery: email via SendGrid API (latency ~1-2 seconds), Slack webhook (instant, <500ms), SMS via Twilio (expensive, use for high-priority only), push notification via Firebase Cloud Messaging, include: company name, ticker, actual vs expected (EPS $1.46 vs $1.39 BEAT +5%), link to filing, market reaction (if market open), Edge cases: pre-market filings (4am-9:30am ET): markets closed, alert for pre-market trading opens 7am, after-hours (4pm-8pm ET): futures markets react immediately, preliminary vs final: some companies file preliminary 8-K then amended 8-K with full data (track amendment flag, update alerts), non-GAAP adjustments: many companies report "adjusted EPS" excluding one-time items (parse both GAAP and non-GAAP, compare to non-GAAP estimates), Scale to 500+ companies: subscribe to CIK list (Central Index Key), filter filings by CIK before parsing, use worker queue (Celery with Redis) for parallel parsing, cache parsed filings (Redis with 24h TTL), database indexes on (ticker, filing_date, filing_type), Performance: target <10 second latency from filing to alert, batch processing of low-priority companies (smaller market cap), priority queue for mega-cap tech (AAPL, MSFT, GOOGL).`,
        keyPoints: [
            'SEC monitoring: Poll EDGAR RSS feed every 60s, filter 8-K Item 2.02 (earnings), download filing for parsing',
            'Parsing: XBRL for structured data (us-gaap:EarningsPerShareBasic), NLP/regex for HTML text, extract EPS/revenue/guidance',
            'Classification: Beat if actual ≥ (estimate + $0.01), miss if < (estimate - $0.01), calculate beat amount and percentage',
            'Alerts: Email (1-2s), Slack webhook (<500ms), SMS for high-priority, include actual vs expected + link to filing',
            'Scale: Worker queue (Celery) for parallel parsing, cache in Redis, database indexes on (ticker, filing_date), <10s latency target',
        ],
    },
    {
        id: 'rfnd-q-2',
        question:
            'Design a financial data aggregation platform that consolidates: (1) Market data (Yahoo Finance for prices, Alpha Vantage for intraday), (2) Economic indicators (FRED for macro data), (3) Alternative data (Twitter sentiment, Google Trends, satellite imagery), (4) Corporate filings (SEC EDGAR for 10-K/10-Q). Build unified API for consumers. Include: caching strategy (Redis for hot data, S3 for cold storage), rate limit handling (backoff for API limits), data quality checks (missing values, outliers, staleness), cost optimization (free tiers first, paid APIs only when needed). How do you ensure data freshness? How do you handle conflicting data sources? Versioning?',
        sampleAnswer: `Financial data aggregation platform architecture: Data sources layer: market data sources (Yahoo Finance: historical prices daily batch at market close, Alpha Vantage: intraday 1min bars real-time via WebSocket), economic indicators (FRED: daily batch at 8am ET for prior day releases, IMF/World Bank: monthly for international data), alternative data (Twitter API: stream relevant hashtags $AAPL $TSLA for sentiment analysis, Google Trends: weekly search volume for brand monitoring, Planet Labs satellite API: weekly imagery for parking lot analysis retail traffic), corporate filings (SEC EDGAR: poll RSS every 60s, parse with sec-edgar-downloader), Caching strategy: Hot data (last 30 days prices, today's intraday): Redis with 1-hour TTL, query Redis first, miss → fetch from source → cache, Warm data (1-5 years historical): PostgreSQL timeseries (TimescaleDB extension), indexes on (ticker, date), Cold data (5+ years): S3 Parquet files, partitioned by year/month, query via Athena, Rate limit handling: track API quotas in Redis (key: api:yahoo_finance:quota, value: remaining_calls, TTL: reset_time), before call: check if quota > 0, if quota exhausted: use backup source or return cached (stale okay message), exponential backoff on 429 errors (wait 1s, 2s, 4s, 8s), Data quality checks: completeness: detect missing dates (trading days should be consecutive), outliers: flag if price moves >20% in single day (possible stock split or data error), staleness: if last_updated > 1 hour for real-time data, mark as stale, cross-validation: compare multiple sources (Yahoo vs Alpha Vantage), flag if differ >1%, Cost optimization: free tiers: Yahoo Finance (primary), Alpha Vantage (500 calls/day), FRED (unlimited), paid APIs: Polygon (real-time, $199/month), only activate if free quota exhausted, IEX Cloud (pay per call), budget $500/month, usage monitoring: track calls per source, alert if approaching budget, Unified API design: REST endpoints: GET /api/v1/market-data/{ticker}?start_date=2024-01-01&end_date=2024-12-31, GET /api/v1/economic-indicators/{indicator}?frequency=monthly, POST /api/v1/alternative-data/sentiment (batch sentiment analysis), Response format: JSON with metadata: {"data": [...], "source": "yahoo_finance", "cached": true, "last_updated": "2024-01-15T10:30:00Z", "quality_score": 0.98}, Data freshness: real-time data: <5 minute delay acceptable (regulatory allows 15min delay for free), daily data: available by 6pm ET same day, weekly/monthly: available within 48 hours of official release, background jobs: Celery beat scheduler checks for updates (market data: every 5min during market hours, economic data: daily at 9am ET), Conflicting data sources: use primary source (Yahoo Finance for prices), secondary sources for validation only, if conflict: log discrepancy, use most recent timestamp, manual review queue for >5% differences, Versioning: API versioning: /api/v1/ vs /api/v2/ (maintain both for 6 months), data versioning: store revision history in database (data_revisions table: original_value, corrected_value, revision_timestamp, reason), corporate filings: track amendments (8-K/A amended filings).`,
        keyPoints: [
            'Data sources: Yahoo Finance (prices), Alpha Vantage (intraday), FRED (economic), Twitter (sentiment), SEC EDGAR (filings)',
            'Caching: Redis (hot 30 days, 1h TTL), PostgreSQL TimescaleDB (warm 1-5yr), S3 Parquet (cold 5+yr)',
            'Rate limits: Track quotas in Redis, check before API call, backoff on 429 errors, use backup sources if exhausted',
            'Data quality: Check completeness (missing dates), outliers (>20% moves), staleness (>1h for real-time), cross-validate sources',
            'Unified API: REST /api/v1/market-data/{ticker}, JSON response with metadata (source, cached, last_updated, quality_score)',
        ],
    },
    {
        id: 'rfnd-q-3',
        question:
            'Implement a financial report analyzer that: (1) Downloads 10-K filings from SEC EDGAR, (2) Extracts financial statements (balance sheet, income statement, cash flow), (3) Calculates financial ratios (P/E, ROE, debt/equity, current ratio), (4) Performs trend analysis (revenue growth, margin trends), (5) Generates summary report with visualizations. Use XBRL for structured data extraction. Include: multi-year comparison (5-year trends), peer comparison (compare to industry averages), risk factor NLP analysis (extract key risks from Item 1A). How do you handle: restatements (amended filings)? Accounting changes (GAAP updates)? Foreign companies (IFRS vs GAAP)?',
        sampleAnswer: `Financial report analyzer system: 10-K download: use sec-edgar-downloader library (Downloader('MyApp', 'email@example.com').get('10-K', ticker, limit=5)), filings saved to sec-edgar-filings/{ticker}/10-K/, parse XBRL files (primary document) and HTML (human-readable backup), XBRL extraction: load with xbrl library (from xbrl import XBRLParser), key tags: us-gaap:Assets (total assets), us-gaap:Liabilities (total liabilities), us-gaap:StockholdersEquity, us-gaap:Revenues, us-gaap:NetIncomeLoss, us-gaap:EarningsPerShareBasic, us-gaap:OperatingCashFlow, context filtering: filter by period (fiscal year end), instant vs duration (balance sheet = instant, income statement = duration), Financial statements extraction: Balance Sheet: assets = total_assets, liabilities = total_liabilities, equity = stockholders_equity, verify: assets = liabilities + equity, Income Statement: revenue, cost_of_revenue, gross_profit = revenue - cogs, operating_income, net_income, EPS, Cash Flow: operating_cash_flow, investing_cash_flow, financing_cash_flow, free_cash_flow = operating - capex, Financial ratios calculation: P/E ratio = market_cap / net_income, ROE = net_income / equity × 100, Debt/Equity = total_debt / equity, Current Ratio = current_assets / current_liabilities, Gross Margin = gross_profit / revenue × 100, Operating Margin = operating_income / revenue × 100, Trend analysis: fetch last 5 years 10-K filings, calculate year-over-year growth: revenue_growth = (revenue_2024 - revenue_2023) / revenue_2023 × 100, margin trends: plot gross_margin, operating_margin, net_margin over 5 years, identify: improving (margins increasing), deteriorating (margins declining), CAGR (compound annual growth rate) = (ending_value / beginning_value)^(1/years) - 1, Peer comparison: define peer group (same industry, similar market cap), fetch financials for peers, calculate industry averages, compare: company P/E vs industry P/E, company ROE vs industry ROE, percentile ranking (top quartile, median, bottom quartile), Risk factor NLP: extract Item 1A "Risk Factors" section from HTML filing, tokenize and extract key phrases with spaCy, identify common risk categories: regulatory risk (keywords: "regulation", "compliance", "SEC"), market risk (keywords: "competition", "market share", "pricing"), operational risk (keywords: "supply chain", "manufacturing", "cybersecurity"), sentiment analysis: classify risks as high/medium/low severity based on frequency and context, Report generation: PDF report with: executive summary (key metrics table), 5-year trend charts (revenue, margins, cash flow), peer comparison table, risk factor summary, Python visualization with matplotlib/seaborn, export to PDF with reportlab, Edge cases: restatements (amended 10-K/A filings): detect amendment flag in filing, replace original data with amended, flag restatement in report ("Company restated 2022 financials"), accounting changes: GAAP updates change tag definitions (e.g., lease accounting ASC 842), detect by comparing tag definitions across years, note incomparability in report, adjust historical for comparability if possible, foreign companies: IFRS uses different tags (ifrs:Assets instead of us-gaap:Assets), detect taxonomy (IFRS vs GAAP), use appropriate tag mappings, note accounting standard in report, convert currencies to USD using historical exchange rates.`,
        keyPoints: [
            '10-K download: sec-edgar-downloader library, parse XBRL (structured) + HTML (backup), extract last 5 years for trends',
            'XBRL extraction: us-gaap tags (Assets, Revenues, NetIncomeLoss, EarningsPerShareBasic), filter by fiscal year context',
            'Financial ratios: P/E (market_cap/net_income), ROE (net_income/equity), Debt/Equity, Current Ratio, Gross/Operating margins',
            'Trend analysis: YoY growth rates, CAGR over 5 years, margin trends (improving/deteriorating), visualize with matplotlib',
            'Edge cases: Amended 10-K/A (replace original, flag restatement), GAAP changes (note incomparability), IFRS (different tags, convert currency)',
        ],
    },
];

