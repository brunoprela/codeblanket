export const moduleProjectPersonalFinanceDashboardQuiz = [
  {
    id: 'mpfd-q-1',
    question:
      "Extend the Personal Finance Dashboard with automated portfolio rebalancing: (1) Define target allocation (60% stocks, 30% bonds, 10% cash), (2) Calculate current allocation drift, (3) Generate rebalance trades (buy/sell to restore targets), (4) Consider tax implications (prefer selling losses, avoid short-term gains), (5) Implement minimum trade size (ignore <$100 adjustments). Include transaction cost modeling ($0 commission but 0.05% slippage). How do you handle: fractional shares (some brokers support, others don't)? Tax-advantaged accounts (401k = no tax, but limited trading)? Multi-account rebalancing (coordinate across brokerage + IRA)?",
    sampleAnswer: `Automated portfolio rebalancing system: Target allocation definition: user configures target_allocation = {'stocks': 0.60, 'bonds': 0.30, 'cash': 0.10}, map tickers to asset classes (asset_class_map = {'AAPL': 'stocks', 'MSFT': 'stocks', 'BND': 'bonds', 'VGSH': 'bonds', 'cash': 'cash'}), Current allocation calculation: total_portfolio_value = sum of all positions across all accounts, for each asset class: current_value = sum (position.market_value where position.ticker in asset_class_map[class]), current_allocation[class] = current_value / total_portfolio_value, drift = abs (current_allocation - target_allocation), Drift detection: if any drift > 0.05 (5%), rebalancing needed, calculate target_value per class = total_portfolio_value × target_allocation[class], rebalance_amount = target_value - current_value (positive = need to buy, negative = need to sell), Rebalance trade generation: for each asset class needing sell (rebalance_amount < 0): choose which ticker to sell within class (prefer: highest unrealized loss for tax-loss harvesting, then longest held for long-term capital gains), for each asset class needing buy (rebalance_amount > 0): choose which ticker to buy (prefer: lowest-cost ETF, highest conviction individual stock), calculate shares = rebalance_amount / current_price, Tax optimization: prioritize selling positions with unrealized losses (offset gains), avoid selling positions held <365 days if possible (short-term gains taxed at ordinary income rate ~37%, long-term gains ~20%), wash sale avoidance (don't repurchase within 30 days of selling at loss), tax-loss harvesting: sell losers, buy similar (not substantially identical) security (e.g., sell VTI, buy ITOT), Minimum trade size filter: if abs (rebalance_amount) < $100, skip (transaction costs exceed benefit), aggregate small adjustments (instead of 5 trades of $50 each, combine into 1 trade of $250), Transaction cost modeling: commission = $0 (most brokers zero-commission now), slippage = 0.0005 × rebalance_amount (0.05% = 5 basis points), market orders: use mid-price + slippage, limit orders: reduce slippage to 0.02% but may not fill, net_cost = sum (slippage_per_trade), subtract from expected rebalance benefit, Fractional shares handling: if broker supports (Fidelity, Charles Schwab): trade exact dollar amounts (buy $1,234.56 of AAPL), if broker doesn't support (E*TRADE, Robinhood): round shares down (buy 8 shares instead of 8.2), leave cash residual (track as 'cash' in portfolio), use cash for next rebalance, Tax-advantaged accounts: 401k/IRA: no capital gains tax, rebalance freely (prefer rebalancing here first), taxable brokerage: consider tax implications (see above), Roth IRA: no tax now or future, ideal for high-growth stocks, Multi-account rebalancing: calculate target allocation across ALL accounts (not per-account), coordinate: sell overweight positions from taxable (harvest losses), buy underweight positions in IRA (avoid wash sale), example: taxable 70% stocks (overweight), IRA 50% stocks → sell stocks in taxable, buy stocks in IRA, end result: both accounts closer to 60% target, Implementation: rebalance_engine calculates trades, presents to user for approval (never auto-execute), user reviews trades, tax impact, clicks 'Execute', orders submitted to broker APIs (Alpaca, IBKR), monitor fills, update database, log rebalance event for audit trail, Frequency: quarterly rebalancing (too frequent = transaction costs, too infrequent = large drifts), threshold-based (only if drift >5%), annual tax-loss harvesting (December for realized losses to offset year's gains).`,
    keyPoints: [
      'Target allocation: Define (60% stocks, 30% bonds, 10% cash), calculate current allocation, drift = abs (current - target)',
      'Rebalance trades: Sell overweight (prefer losses for tax harvesting), buy underweight (prefer low-cost ETFs), calculate shares',
      'Tax optimization: Sell losses first (offset gains), avoid short-term (<365 days), wash sale avoidance (30-day rule)',
      'Transaction costs: $0 commission, 0.05% slippage modeling, minimum $100 trade size (filter small adjustments)',
      'Multi-account: Rebalance across all accounts (sell from taxable, buy in IRA), coordinate to avoid wash sales, quarterly or 5% drift trigger',
    ],
  },
  {
    id: 'mpfd-q-2',
    question:
      "Add retirement planning calculator to dashboard: (1) Input current savings, (2) Monthly contribution, (3) Expected return (7% annualized), (4) Target retirement age, (5) Desired annual income in retirement. Calculate: savings needed at retirement (4% rule), monthly contribution required, probability of success (Monte Carlo with 10K simulations). Include Social Security estimate. How do you handle: inflation (adjust future dollars to today's purchasing power)? Market crashes (sequence of returns risk)? Healthcare costs in retirement ($300K lifetime)?",
    sampleAnswer: `Retirement planning calculator: Input parameters: current_age = 35, retirement_age = 65, years_to_retirement = 30, current_savings = $50,000, monthly_contribution = $1,500, expected_return = 0.07 (7% annualized), desired_annual_income = $80,000 (in today's dollars), inflation_rate = 0.03 (3%), Savings needed calculation (4% withdrawal rule): retirement_spending = desired_annual_income, savings_needed = retirement_spending / 0.04 (4% safe withdrawal rate, Trinity Study), example: $80K annual / 0.04 = $2M needed, adjust for inflation (future dollars): savings_needed_future = savings_needed × (1 + inflation_rate)^years_to_retirement, example: $2M × 1.03^30 = $4.85M in future dollars, Monthly contribution required: future_value = current_savings × (1 + r)^n + monthly × [((1 + r)^n - 1) / r], solve for monthly contribution, where r = annual_return / 12, n = years_to_retirement × 12, formula: monthly_required = (savings_needed_future - current_savings × (1 + r)^n) / [((1 + r)^n - 1) / r], example: monthly_required = (\$4.85M - $50K × 1.0058^360) / [((1.0058^360) - 1) / 0.0058] = $3,200/month, compare to current contribution ($1,500/month → need to increase $1,700), Monte Carlo simulation: run 10,000 simulations of 30-year accumulation phase, for each simulation: initialize portfolio_value = current_savings, for each year (1 to 30): annual_return = random.normal (expected_return, volatility=0.15) (stocks ~15% annual volatility), portfolio_value = portfolio_value × (1 + annual_return) + monthly_contribution × 12, calculate: probability of success = count (simulations where final_portfolio_value >= savings_needed_future) / 10,000, percentiles: p10 = 10th percentile (worst 10%), p50 = median, p90 = 90th percentile (best 10%), example results: p10 = $3.2M, p50 = $4.9M, p90 = $7.4M, success_probability = 65% (65% of simulations reached $4.85M goal), Social Security estimate: full retirement age (67 for born after 1960), average benefit = $1,800/month = $21,600/year (2024), adjust for claiming age (early at 62 = 70% of benefit, delayed at 70 = 124% of benefit), personal estimate: query SSA.gov API or manual entry, include in retirement income: total_retirement_income = portfolio_withdrawal (4% rule) + social_security, Inflation adjustment: convert all future dollars to today's dollars for comparison (present value), real return = nominal_return - inflation (7% - 3% = 4% real), display in today's dollars: \"You'll need $2M (in today's purchasing power) or $4.85M in future dollars\", Sequence of returns risk: retiring into bear market is devastating (even if long-term returns same), simulation: if first 5 years of retirement have negative returns, portfolio may fail even with 7% long-term average, mitigation: build cash buffer (2 years expenses in cash, don't sell stocks during crashes), bucket strategy (bonds for years 3-10, stocks for 10+), reduce equity allocation near retirement (glide path: 80% stocks at 40 → 60% at 65), Healthcare costs: Medicare starts at 65 (Part A free, Part B ~$170/month), supplemental insurance (Medigap ~$200/month), out-of-pocket (copays, prescriptions ~$300/month), long-term care (nursing home $8K/month, not covered by Medicare), lifetime estimate: $300K for couple, include in retirement budget: retirement_spending += healthcare_costs, Visualization: Dashboard shows: current trajectory (will reach $X at retirement with current contributions), gap analysis (need $3,200/month but contributing $1,500 → short $1,700), probability chart (histogram of Monte Carlo outcomes, goal line at $4.85M), recommendations: Increase monthly contribution to $3,200, Reduce expenses in retirement to $65K (need $1.625M instead), Work 2 more years (retire at 67 instead of 65).`,
    keyPoints: [
      'Savings needed: desired_annual_income / 0.04 (4% rule) = $80K / 0.04 = $2M, adjust for inflation (30 years × 3% = $4.85M future)',
      'Monthly contribution: Solve FV formula for monthly payment, compare required vs current, identify gap (need $3,200 but contributing $1,500)',
      'Monte Carlo: 10K simulations with 7% mean, 15% volatility, calculate success probability (% reaching goal), show p10/p50/p90 outcomes',
      'Social Security: $1,800/month average, adjust for claiming age (62=70%, 70=124%), include in retirement income alongside portfolio withdrawal',
      'Risks: Inflation (use real returns 4%), sequence risk (cash buffer, glide path), healthcare (\$300K lifetime, add to budget)',
    ],
  },
  {
    id: 'mpfd-q-3',
    question:
      "Implement tax optimization module: (1) Tax-loss harvesting (identify positions with losses, suggest sales to offset gains), (2) Asset location (place bonds in IRA, stocks in taxable for tax efficiency), (3) Capital gains budget (project this year's capital gains, warn if approaching higher bracket), (4) Roth conversion analysis (convert traditional IRA to Roth when in low tax bracket), (5) Estimated tax calculator (quarterly estimated taxes for self-employed). How do you handle: state taxes (vary by state, CA 13.3% vs TX 0%)? AMT (alternative minimum tax)? Net investment income tax (3.8% on income > \\$250K)?",
    sampleAnswer: `Tax optimization module implementation: Tax-loss harvesting engine: scan all taxable account positions, calculate unrealized_gain_loss = (current_price - cost_basis) × quantity, identify harvestable losses: positions with unrealized_gain_loss < -$500 (ignore tiny losses due to transaction costs), sort by loss size (largest losses first), for each harvestable loss: estimated_tax_savings = abs (unrealized_loss) × marginal_tax_rate (e.g., $5K loss × 32% = $1,600 savings), suggest replacement security (substantially different to avoid wash sale), example: sell VTI (total market), buy ITOT (similar but not identical index), repurchase original after 31 days if desired, annual limit: $3,000 loss deduction against ordinary income (excess carries forward), wash sale detection: check if same security purchased within 30 days before/after sale (if yes, disallow loss), track across all accounts (including IRA, spouse's accounts), Asset location optimization: tax efficiency ranking: most tax-inefficient (bonds, REITs, high-dividend stocks) → place in IRA/401k (tax-deferred), most tax-efficient (growth stocks, index funds) → place in taxable (long-term cap gains 20%, qualified dividends 20%), municipal bonds → taxable only (interest is tax-free), optimization algorithm: for each asset class: calculate after-tax return in taxable vs IRA, assign to account with highest after-tax return, example: bonds 4% yield × (1 - 32% tax) = 2.72% after-tax in taxable, vs 4% in IRA (no current tax) → bonds go in IRA, Capital gains budget: track year-to-date realized gains (sum of all sales where sale_price > cost_basis), project end-of-year gains (include planned rebalancing trades), tax brackets (2024 long-term cap gains): $0-$47K: 0%, $47K-$518K: 15%, $518K+: 20%, marginal bracket warning: if current_income + realized_gains > $518K, alert \"You're approaching 20% capital gains bracket (currently 15%)\", suggest: defer sales to next year, harvest losses to offset, Roth conversion analysis: traditional IRA → Roth IRA conversion, taxable event (pay ordinary income tax on conversion amount), optimal when: in low tax bracket year (early retirement, between jobs, sabbatical), expect higher bracket in future (currently 24%, expect 32%+ later), calculation: current_tax_bracket = 24%, future_tax_bracket = 32%, tax_cost_now = conversion_amount × 24%, tax_savings_later = conversion_amount × (32% - 0%) = 32% (no tax on Roth withdrawals), net benefit = 32% - 24% = 8% savings, optimal conversion amount: fill current bracket (if in 24% bracket, convert up to top of bracket $191K), avoid jumping to next bracket, Estimated tax calculator (self-employed): quarterly deadlines (Apr 15, Jun 15, Sep 15, Jan 15), calculate: total_income = salary + self_employment + investment_income, self_employment_tax = self_employment_income × 15.3% (Social Security 12.4% + Medicare 2.9%), federal_income_tax = apply tax brackets to taxable_income, state_tax = apply state brackets (CA 13.3% top bracket, TX 0%), total_tax = federal + state + SE_tax, quarterly_payment = total_tax / 4, safe harbor rule: pay 100% of prior year's tax (110% if income >$150K) to avoid penalties, State tax handling: lookup state_tax_rate by state (hardcode or API), calculate: state_taxable_income (may differ from federal, e.g., CA doesn't allow SALT deduction), state_tax = apply_state_brackets (income, state), total_tax = federal + state, high-tax states (CA, NY, NJ): asset location more important (muni bonds tax-free), low/no-tax states (TX, FL, WA): less benefit from tax-deferred accounts, AMT calculation: alternative minimum taxable income (AMTI) = AGI + add-backs (state tax deduction, ISO exercise, etc.), AMT exemption = $81,300 (2024), AMT rate = 26% (<$220K) or 28% (>$220K), pay AMT if AMT_tax > regular_tax, trigger: high income + large deductions (state tax, ISO exercise), mitigation: time ISO exercises, spread AMT over multiple years, Net Investment Income Tax (NIIT): 3.8% surtax on investment income (interest, dividends, capital gains), applies if MAGI > $250K (married) or $200K (single), calculation: niit = min (net_investment_income, MAGI - threshold) × 3.8%, include in tax projections for high earners, Dashboard display: Tax Summary showing: YTD realized gains, projected tax liability, tax-loss harvesting opportunities, Roth conversion suggestions, estimated quarterly payments, alerts: \"Harvest $10K losses to offset gains\", \"Convert $50K IRA to Roth (in 24% bracket now, expect 32% later)\", \"Pay $15K estimated tax by June 15\".`,
    keyPoints: [
      'Tax-loss harvesting: Identify losses >$500, sell + buy similar security (avoid wash sale), save taxes (loss × marginal_rate), $3K annual limit vs income',
      'Asset location: Bonds/REITs in IRA (tax-inefficient), stocks in taxable (long-term cap gains 20%), municipal bonds in taxable (tax-free interest)',
      'Capital gains budget: Track YTD realized gains, project end-of-year, warn if approaching higher bracket (\$518K = 20% vs 15%)',
      "Roth conversion: Convert traditional IRA → Roth when in low bracket (24% now vs 32% later), fill bracket but don't jump to next",
      'State + AMT + NIIT: State tax varies (CA 13.3%, TX 0%), AMT triggers on high income + deductions, NIIT 3.8% on investment income >$250K',
    ],
  },
];
