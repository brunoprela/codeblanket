/**
 * Quiz questions for Drawing Effective Architecture Diagrams section
 */

export const architecturediagramsQuiz = [
  {
    id: 'q1',
    question:
      "You're drawing a system architecture on the whiteboard during an interview. Walk through your process: what do you draw first, second, third, and why?",
    sampleAnswer:
      'DRAWING PROCESS - LAYERED APPROACH: STEP 1: START WITH CLIENT (top/left): Draw: Box or icon labeled "Mobile/Web Client" or "User". Why first: (1) Establishes entry point - where requests originate. (2) Sets the reference point for data flow. (3) Shows you\'re thinking from user perspective. Time: 10 seconds. STEP 2: LOAD BALANCER/ENTRY POINT: Draw: Box labeled "Load Balancer" below/right of client, Arrow from client to LB. Why: (1) First component users hit. (2) Shows you understand high-availability patterns. (3) Natural entry to your system. Time: 15 seconds. STEP 3: APPLICATION LAYER: Draw: Multiple boxes "API Server 1, 2, N" or single box "API Servers (×5)", Arrows from LB to servers. Why: (1) Core business logic layer. (2) Shows horizontal scaling understanding. (3) Stateless services concept. Time: 20 seconds. STEP 4: DATA LAYER - DATABASE & CACHE: Draw: Cylinder/box "PostgreSQL" or "Cassandra", Box "Redis Cache" next to app servers, Arrows: App ← → Cache ← → DB. Why: (1) Persistent storage is fundamental. (2) Cache shows performance awareness. (3) Read/write paths clear. Time: 30 seconds. STEP 5: SPECIALIZED STORAGE (if needed): Draw: Box "S3" for object storage, Box "CDN" for content delivery. Why: (1) Shows understanding of different storage types. (2) CDN shows global scale awareness. Time: 20 seconds. STEP 6: ASYNC PROCESSING (if needed): Draw: Box "Message Queue (Kafka)", Box "Background Workers", Arrow: API → Queue → Workers → DB. Why: (1) Shows async processing understanding. (2) Decouples write paths. (3) Enables scalability. Time: 30 seconds. STEP 7: LABEL & NUMBER FLOWS: Add: Component labels (clear names), Numbered arrows showing request flow (1, 2, 3...), Data flow directions. Why: (1) Clarity - interviewer can follow your logic. (2) Shows communication skills. (3) Makes discussion easier. Time: 30 seconds. STEP 8: ASK FOR FEEDBACK: Say: "Here\'s the high-level architecture. Should I add more detail to any component?" or "Does this make sense before I dive deeper into [X]?" Why: (1) Collaborative - not monologue. (2) Ensures you\'re on right track. (3) Lets interviewer guide depth. TOTAL TIME: ~3 minutes for complete high-level diagram. STRATEGY: Build incrementally, not all at once. Each layer builds on previous. Interviewer can stop you and ask questions at any layer. Allows you to adjust based on feedback. WHAT NOT TO DO: ❌ Draw everything tiny at once (overwhelming, hard to see). ❌ Start with obscure component (message queue before database?). ❌ No labels (interviewer confused). ❌ Skip basic components (where\'s the load balancer?). ❌ Draw without explaining (silent drawing is awkward). BEST PRACTICE: "Let me start by drawing the client here... requests flow to the load balancer... which distributes to our API servers... [keep narrating as you draw]" This shows: (1) Structured thinking (not random). (2) Layered approach (simple → complex). (3) Communication (talking while drawing). (4) Standard patterns (LB, app, DB, cache). Interviewers love this systematic approach!',
    keyPoints: [
      'Draw incrementally: Client → LB → App → DB → Cache → Specialized services',
      "Narrate as you draw: explain each component and why it's needed",
      'Label everything clearly: names, arrows, data flows',
      'Ask for feedback: "Should I add more detail here?"',
      'Total time: ~3 minutes for high-level, leaves time for deep dive',
    ],
  },
  {
    id: 'q2',
    question:
      'Your whiteboard diagram is getting cluttered with many components. How do you organize it to keep it clear and readable?',
    sampleAnswer:
      'ORGANIZING CLUTTERED DIAGRAMS - GROUPING & LAYERING: STRATEGY 1: LOGICAL GROUPING WITH BOXES: Group related components in dashed boxes: [Client Layer]: Mobile app, Web app, API Gateway. [Application Layer]: API servers, Auth service, Business logic. [Data Layer]: Primary DB, Read replicas, Cache. [Storage Layer]: S3, CDN. [Async Processing]: Message queue, Workers. Label each group clearly. Why this works: (1) Shows logical separation of concerns. (2) Easier to reference: "In the data layer...". (3) Makes complex system digestible. (4) Shows architectural thinking. STRATEGY 2: HORIZONTAL LAYERS (LEFT TO RIGHT): Layer 1 (leftmost): Client. Layer 2: Load balancer, API Gateway. Layer 3: Microservices. Layer 4: Databases, Cache. Layer 5: External services (S3, CDN). Draw vertical lines between layers if helpful. Why: (1) Natural flow: left (user) → right (storage). (2) Easy to follow request path. (3) Shows tier separation (presentation → business → data). STRATEGY 3: VERTICAL LAYERS (TOP TO BOTTOM): Top: Clients. Middle: Application layer (LB, servers, cache). Bottom: Data layer (DB, storage). Background: Async processing (side or bottom). Why: (1) Gravity metaphor (data sinks to bottom). (2) Common in mobile diagrams. (3) Works well for whiteboard space. STRATEGY 4: USE ABBREVIATIONS (WITH LEGEND): Instead of "Load Balancer", use "LB". Instead of "Content Delivery Network", use "CDN". Create legend in corner: LB = Load Balancer, DB = Database, MQ = Message Queue. Why: (1) Saves space. (2) Still clear with legend. (3) Industry-standard abbreviations. But: Don\'t use obscure abbreviations ("KC" for "Key-Value Cache"?). STRATEGY 5: COLLAPSE DETAILS: Instead of drawing 5 API server boxes, draw one box labeled "API Servers (×5)" or "API Servers (N instances)". Instead of 3 DB replicas, show "Primary" and "Replicas (×2)". Why: (1) Saves massive space. (2) Still conveys scaling concept. (3) Can always zoom in later if asked. STRATEGY 6: USE COLOR (IF AVAILABLE): Blue: Read path. Red: Write path. Green: Cache/optimization. Why: (1) Visual separation without clutter. (2) Easy to trace flows. (3) Engaging for interviewer. But: Only if you have colored markers! STRATEGY 7: REDRAW IF NECESSARY: If diagram becomes unmanageable: Say: "This is getting cluttered. Let me redraw this more clearly." Quickly redraw with better organization (2 minutes). Why: (1) Shows you value clarity. (2) Better to restart than struggle with mess. (3) Demonstrates humility and adaptability. When to redraw: Components overlapping, arrows crossing everywhere, ran out of space, interviewer looks confused. STRATEGY 8: INCREMENTAL REVEAL: Don\'t draw everything at once. Start simple (3 components). Add components as discussion deepens. "Let me add caching here to improve read performance..." Why: (1) Starts clean, grows organically. (2) Easier for interviewer to follow. (3) Allows feedback at each stage. (4) Avoids premature complexity. REAL EXAMPLE: Initial (cluttered): 20 boxes, arrows everywhere, hard to read. Reorganized: [Client] → [API Gateway] → [Services: User, Post, Feed] → [Data: DB, Cache] → [Storage: S3] → [CDN]. Result: Same information, 80% clearer. KEY PRINCIPLE: Clarity > Completeness. Better to have clean diagram with 70% of components than cluttered diagram with 100% that nobody can read. INTERVIEW IMPACT: Clean diagram = Structured thinker, good communicator, considerate of audience. Cluttered diagram = Disorganized, poor planning, hard to work with.',
    keyPoints: [
      'Group related components in labeled boxes (Client, App, Data layers)',
      'Use horizontal/vertical layering for natural flow',
      'Collapse details: "API Servers (×5)" instead of 5 boxes',
      'Use abbreviations with legend (LB, DB, CDN)',
      'Redraw if it gets too cluttered - shows you value clarity',
    ],
  },
  {
    id: 'q3',
    question:
      'How do you use your architecture diagram to facilitate discussion during the interview? Give specific examples of how to reference it effectively.',
    sampleAnswer:
      'USING DIAGRAMS TO FACILITATE DISCUSSION: TECHNIQUE 1: POINT AND NARRATE: As you draw, narrate what you\'re adding: "I\'m adding a load balancer here to distribute traffic across multiple API servers..." When discussing, physically point: "When a user uploads a photo [point to client], it goes through the load balancer [point] to one of these API servers [point]..." Why effective: (1) Keeps interviewer engaged visually. (2) Ensures you\'re both looking at same thing. (3) Prevents miscommunication. (4) Makes abstract concepts concrete. TECHNIQUE 2: NUMBER THE DATA FLOW: Draw numbers next to arrows showing sequence: Client --1--> LB --2--> API --3--> DB. When explaining: "First (1), user makes request. Second (2), LB routes to server. Third (3), server queries database..." Why: (1) Crystal clear flow. (2) Easy to reference: "Let\'s discuss step 3 in more detail...". (3) Shows systematic thinking. TECHNIQUE 3: ASK CHOICE QUESTIONS USING DIAGRAM: Point to component: "For this database [point], should I discuss the sharding strategy or shall we move to caching?" "I have two options for this component [point]: pull model or push model. Should we explore both?" Why: (1) Collaborative - involving interviewer. (2) Helps prioritize deep dive topics. (3) Shows you understand multiple approaches. TECHNIQUE 4: USE DIAGRAM TO IDENTIFY GAPS: During discussion, scan diagram and say: "Looking at this architecture, I realize we haven\'t discussed failure scenarios. What if this API server [point] goes down?" "I notice we don\'t have monitoring here [point to gap]. Should we discuss observability?" Why: (1) Shows thoroughness. (2) Proactively finds issues. (3) Demonstrates production mindset. (4) Opens discussion naturally. TECHNIQUE 5: ZOOM IN FOR DEEP DIVES: When diving deep, draw zoomed version: "Let me expand this database component [circle it] and show the sharding strategy..." Draw detail view to the side or on different area. Connect with arrow: "Detail of DB →". Why: (1) Keeps main diagram clean. (2) Shows you can operate at multiple abstraction levels. (3) Easy to discuss specifics without cluttering. TECHNIQUE 6: ANNOTATE WITH NUMBERS/METRICS: Add annotations on diagram: Next to API servers: "10K QPS each". Next to cache: "90% hit rate". Next to DB: "100 shards". When discussing: "Given this cache hit rate [point], we only hit the database for 10% of reads..." Why: (1) Grounds discussion in reality. (2) Shows quantitative thinking. (3) Makes trade-offs concrete. TECHNIQUE 7: USE DIAGRAM TO COMPARE ALTERNATIVES: Draw option A on left, option B on right: "Here are two approaches for feed generation..." Point back and forth while comparing: "Option A [point left] is faster for reads but slower for writes [point to write path]. Option B [point right] is opposite." Why: (1) Visual comparison is powerful. (2) Makes trade-offs explicit. (3) Helps interviewer see your reasoning. TECHNIQUE 8: CHECKPOINT WITH DIAGRAM: After adding components, step back: "So far we have [sweep hand across diagram]: clients, load balancer, API servers, database, and cache. Does this high-level structure make sense before I add more?" Why: (1) Ensures alignment. (2) Prevents going down wrong path. (3) Invites feedback. (4) Shows collaborative spirit. TECHNIQUE 9: USE DIAGRAM FOR FAILURE ANALYSIS: Point to each component and ask "What if?": "What if this load balancer fails? [point] We need redundancy." "What if this database is overwhelmed? [point] We need caching and read replicas." Why: (1) Systematic coverage of failure scenarios. (2) Visual way to ensure no single point of failure. (3) Shows reliability thinking. TECHNIQUE 10: TRACE REAL REQUESTS THROUGH DIAGRAM: "Let me trace what happens when user posts a tweet:" [Move finger along path]: "Start here [client], through LB, hits API server, writes to database, publishes to queue, fanout workers process, done." Why: (1) Makes abstract architecture concrete. (2) Easy to spot issues: "Wait, there\'s no validation step!". (3) Interviewer can follow your logic. REAL EXAMPLE: Interviewer: "How do you handle celebrity users with millions of followers?" Me: [Points to fanout workers] "Great question. With our current architecture, when a celebrity tweets here [point], these fanout workers [point] would try to write to millions of timelines, which is too slow. Let me add a hybrid approach here [draws alternative path]..." Interviewer: [Nods] "Good catch!" WHAT NOT TO DO: ❌ Draw diagram then ignore it (why did you draw it?). ❌ Talk about components not on diagram (confusing). ❌ Face diagram with back to interviewer (turn sideways!). ❌ Draw illegibly then not refer to it. KEY PRINCIPLE: Diagram is shared communication tool, not just your notes. Use it actively throughout interview. Keep updating, annotating, referencing it. Best interviews: Diagram evolves as discussion deepens. You and interviewer both pointing at it, discussing trade-offs, exploring alternatives. It\'s a collaborative whiteboard session, not a lecture.',
    keyPoints: [
      'Point and narrate: physically point to components while explaining',
      'Number the data flow (1,2,3) for clear sequencing',
      'Use diagram to ask choice questions: "Should we discuss X or Y?"',
      'Annotate with metrics (QPS, hit rates) to ground discussion',
      'Trace real requests through the diagram with your finger/marker',
    ],
  },
];
