/**
 * Quiz questions for Module Review & Next Steps section
 */

export const modulereviewQuiz = [
  {
    id: 'q1',
    question:
      'After completing this module, a friend asks you: "What\'s the single most important thing I should focus on to improve my system design interview performance?" Based on everything you\'ve learned, what would you advise?',
    sampleAnswer:
      'THE MOST IMPORTANT THING: STRUCTURED, COMMUNICATIVE THINKING: If I had to choose ONE thing, it\'s: "Follow a systematic framework and communicate your thought process out loud throughout the interview." Here\'s why this matters most: REASON 1: INTERVIEWERS EVALUATE THINKING, NOT SOLUTIONS: System design has no single "correct" answer. Interviewer wants to see HOW you think, not what you memorize. Framework shows: (1) You can break down complex problems. (2) You approach problems systematically. (3) You don\'t jump to solutions randomly. (4) You make decisions based on requirements, not buzzwords. Example: Bad candidate: [Silently draws microservices architecture]. Good candidate: "Before designing, let me clarify requirements. First, scale: how many users? Second, consistency needs: strong or eventual? Based on your answers, I\'ll choose appropriate technologies..." REASON 2: COMMUNICATION SEPARATES SENIOR FROM JUNIOR: Junior: Knows technologies, can\'t explain trade-offs. Senior: Explains WHY they choose each component, discusses alternatives, adapts based on feedback. Communication skills: (1) Thinking out loud: "I\'m considering Cassandra vs PostgreSQL. Cassandra handles high writes better, but we lose ACID transactions. Given our requirements favor writes over consistency, I recommend Cassandra." (2) Using diagrams: Drawing while explaining, pointing to components, numbered flows. (3) Checking in: "Does this approach make sense?" "Should I dive deeper here?" (4) Handling feedback: "Good point! Let me add caching to address that..." REASON 3: FRAMEWORK PREVENTS COMMON MISTAKES: Without structure, candidates: Jump to solutions before understanding requirements, Spend too much time on one part, Miss critical components, Get flustered when stuck. With framework: (1) Requirements first → Prevents designing wrong system. (2) High-level design → Shows big picture thinking. (3) Deep dive → Demonstrates technical depth. (4) Wrap up → Shows production mindset (failures, monitoring). Time management naturally follows. REASON 4: COMPENSATES FOR KNOWLEDGE GAPS: You can\'t know every technology. But with good process: Candidate: "I haven\'t used Cassandra in production, but based on requirements—high write throughput and eventual consistency acceptable—I believe it fits better than PostgreSQL. Here\'s my reasoning: [explains trade-offs]. Does this align with what you\'re looking for?" Interviewer: [Impressed by reasoning] "Yes, that\'s the right approach." Knowledge gaps OK if reasoning is sound. No amount of tech knowledge compensates for poor communication. WHAT THIS DOESN\'T MEAN: ❌ Don\'t ignore technical depth (you need fundamentals). ❌ Don\'t just talk without substance (framework + knowledge). ❌ Don\'t memorize the framework robotically (internalize it). HOLISTIC APPROACH: Of course you also need: (1) Basic system design knowledge (CAP, scaling, databases). (2) Back-of-envelope calculation skills. (3) Understanding of common patterns. (4) Ability to discuss trade-offs. But these are "table stakes." What differentiates candidates: (1) Structure: Follow systematic approach. (2) Communication: Think out loud, engage interviewer. (3) Adaptability: Respond to hints, incorporate feedback. (4) Depth: Deep dive into 2-3 components thoroughly. PRACTICE STRATEGY: If friend has limited time: (1) Master the 4-step framework (10 hours practice). (2) Practice 5 design problems using framework (10 hours). (3) Record yourself, review communication (5 hours). (4) Mock interview with friend (5 hours). Total: 30 hours focused practice. This beats 100 hours of randomly studying technologies without structure. REAL INTERVIEW IMPACT: I\'ve seen: Candidate A: Knows 20 technologies, can\'t explain why they use any of them, no structure. Result: Rejected ("No clear thinking process"). Candidate B: Knows 5 technologies deeply, follows framework, communicates clearly, discusses trade-offs. Result: Offer ("Structured thinker, great communicator"). FINAL ADVICE TO FRIEND: "Focus on following a systematic framework and communicating your thinking out loud. Practice explaining WHY you make each decision, discussing trade-offs, and adapting to feedback. Everything else—technology knowledge, calculations, diagrams—supports this core skill. Master the process, and the solutions will follow." This advice applies to engineers at all levels, from new grad to principal.',
    keyPoints: [
      'Most important: Follow systematic framework + communicate thinking out loud',
      'Interviewers evaluate HOW you think, not what you memorize',
      'Communication (trade-offs, reasoning) separates senior from junior',
      'Framework prevents common mistakes: jumping to solutions, poor time management',
      "Good process compensates for knowledge gaps; poor process can't be saved by knowledge",
    ],
  },
  {
    id: 'q2',
    question:
      'Reflect on Sections 1-7. Which concept was most surprising or counter-intuitive to you, and how does it change your approach to system design?',
    sampleAnswer:
      'MOST COUNTER-INTUITIVE CONCEPTS: CONCEPT 1: "SIMPLICITY IS OFTEN BETTER THAN COMPLEXITY": Counter-intuitive because: I assumed: More technologies/microservices = better system design. Interviews reward showing off knowledge of Kafka, Kubernetes, Cassandra. Reality: Best engineers know when NOT to use complex tech. Designing monolith with PostgreSQL for 10K users is BETTER than over-engineered microservices. Example that changed my thinking: Problem: URL shortener (100M requests/month). My old approach: Microservices (URL service, analytics service, admin service), Kubernetes orchestration, Cassandra cluster, Kafka event streaming, Redis cluster. Interviewer: "At 40 writes/sec, do you need all this?" Me: [Realizes I\'m over-engineering] "Actually... no." Better approach: Simple API server, PostgreSQL (handles easily), Single Redis instance, Load balancer. Scales to millions of URLs without complexity. Why this matters: Shows engineering judgment (match complexity to requirements), Demonstrates cost awareness (simpler = cheaper), Proves you understand trade-offs (complexity has maintenance cost). How it changes my approach: Now I start simple, justify each added complexity, ask "Do we need this given the scale?", Scale up only when numbers justify it. CONCEPT 2: "THERE\'S NO \'CORRECT\' ANSWER": Counter-intuitive because: I thought: System design has right/wrong answers like coding interviews. Need to match interviewer\'s expected solution. Reality: Interviews evaluate your PROCESS, not your solution. Two candidates can design completely different systems and both get offers. Example: Design Twitter feed generation: Candidate A: Push model (fanout on write), Justifies: Fast reads, acceptable for their scale assumptions. Candidate B: Pull model (fanout on read), Justifies: Simpler writes, works for their different scale assumptions. Both can be "correct" if well-reasoned! Why this matters: Reduces anxiety (no single right answer), Focus shifts to trade-offs and reasoning, Encourages discussing alternatives. How it changes my approach: I now: Present multiple options (push vs pull, SQL vs NoSQL), Explicitly state assumptions that drive my choice, Say "There are trade-offs either way" instead of claiming one is objectively better, Welcome interviewer challenging my choices (good discussion). CONCEPT 3: "BACK-OF-ENVELOPE CALCULATIONS ARE MANDATORY": Counter-intuitive because: I assumed: Estimations are optional/"nice to have". Can design without actual numbers. Reality: Calculations validate whether your design works! Without numbers, you might propose solutions that don\'t scale. Example: Design Instagram. Without calculations: "We\'ll use PostgreSQL." [Might work or might not—you don\'t know!] With calculations: 500M DAU × 0.5 uploads/day = 250M photos/day = 3K writes/sec. PostgreSQL: ~1K writes/sec → Need sharding or different database. Decision now grounded in reality. Why this matters: Shows quantitative thinking (engineering, not hand-waving), Validates your architecture actually works, Helps right-size solutions (not over/under-engineer). How it changes my approach: Always calculate: Storage (TB/day, PB/year), QPS (writes/reads per second), Bandwidth (Gbps). Use numbers to justify: "At 500K writes/sec, single DB can\'t handle it, so we need sharding." Interviewer sees I\'m engineering, not guessing. CONCEPT 4: "SPEND MOST TIME ON DEEP DIVE, NOT REQUIREMENTS": Counter-intuitive because: I assumed: Requirements are most important (50% of time). Need to get every detail before designing. Reality: Requirements: 10-15 minutes (enough to understand). Deep dive: 20-25 minutes (where you show technical depth). Spending 30 minutes on requirements = no time for depth = looks junior. Why this matters: Deep dive is where you differentiate yourself, Shows you can go beyond surface-level understanding, Demonstrates expertise in specific areas. How it changes my approach: Requirements: Be efficient (5-10 min). Ask key questions, state assumptions, move on. Deep dive: Allocate most time here. Pick 2-3 critical components, Explore thoroughly: options, trade-offs, implementation details, Show I can go DEEP, not just BROAD. CONCEPT 5: "INTERVIEWER HINTS ARE GIFTS, NOT CRITICISMS": Counter-intuitive because: I felt: Interviewer pointing out gaps = I\'m failing. Should defensively justify my design. Reality: Hints are collaborative guidance! They\'re helping you succeed by steering discussion to important areas. Example: Interviewer: "What about caching?" Old me: [Defensive] "The database should be fine." [Miss opportunity]. New me: "Great point! Let me add caching. At 500K QPS, cache can handle 90% of reads, reducing DB load significantly." [Show adaptability]. Why this matters: Interview is collaborative, not adversarial, Best candidates eagerly incorporate feedback, Shows you\'re coachable and team-oriented. How it changes my approach: Welcome hints enthusiastically: "Good point!", Quickly incorporate suggestions, Thank interviewer for guidance, View it as: We\'re designing together, not me defending against them. OVERALL IMPACT ON MY APPROACH: Before this module: Memorize architectures, Show off every technology I know, Assume more complexity = better, Work solo (ignore interviewer). After this module: Start simple, scale as needed, Use frameworks and calculations, Communicate continuously, Welcome collaboration. This shift from "showing off knowledge" to "demonstrating structured thinking and communication" is the biggest change. And ironically, this approach leads to BETTER interviews because it\'s what senior engineers actually do in real jobs!',
    keyPoints: [
      'Simplicity often better than complexity: match design to actual requirements',
      'No single "correct" answer: focus on reasoning and trade-offs',
      'Calculations are mandatory: validate your design actually works at scale',
      'Deep dive (20-25 min) more important than requirements (5-10 min)',
      'Interviewer hints are gifts, not criticisms: incorporate feedback enthusiastically',
    ],
  },
  {
    id: 'q3',
    question:
      "You're about to take your first system design interview tomorrow. Based on this module, what are the top 3 things you'll focus on, and what are 3 things you'll deliberately avoid?",
    sampleAnswer:
      'PREPARING FOR TOMORROW\'S INTERVIEW: TOP 3 THINGS TO FOCUS ON: FOCUS #1: FOLLOW THE 4-STEP FRAMEWORK RELIGIOUSLY: What I\'ll do: Set mental timer: Requirements (5-10 min) → High-level (10-15 min) → Deep dive (20-25 min) → Wrap up (5 min). Write these on corner of whiteboard as reminder. Explicitly transition between steps: "Now that we\'ve clarified requirements, let me design the high-level architecture..." Why this matters: Prevents common mistake of spending 40 min on requirements, Shows structured thinking from first minute, Ensures I cover all important areas, Manages time automatically. Specific tactics: Requirements: Ask 5-7 key questions (scale, latency, consistency, availability), state assumptions, move on. High-level: Draw diagram, define components, explain flows. Deep dive: Pick 2 components (let interviewer guide), explore thoroughly with trade-offs. Wrap up: Discuss failures, monitoring, bottlenecks, trade-offs made. Mindset: I\'m following a proven process, not winging it. FOCUS #2: COMMUNICATE CONTINUOUSLY (THINK OUT LOUD): What I\'ll do: Narrate everything: "I\'m thinking about database choice. We have high writes, so considering Cassandra vs sharded PostgreSQL. Cassandra pros: high write throughput, horizontal scaling. Cons: eventual consistency, no joins. Let me think about our consistency requirements..." Ask check-in questions: "Does this approach make sense?", "Should I dive deeper into caching or move to discuss sharding?", "Am I on the right track here?" Point to diagram while explaining: "When user uploads photo [point], goes through load balancer [point], API server processes [point]..." Why this matters: Silence is awkward and gives interviewer nothing to evaluate, Shows my thought process, not just conclusions, Keeps interviewer engaged and able to provide hints, Demonstrates communication skills (critical for senior roles). Specific tactics: If stuck: Say "I\'m thinking through the trade-offs here..." (shows I\'m working through it, not frozen), Ask: "What would you prioritize: latency or consistency?" (collaborative), Propose: "I have two approaches. Let me explain both..." Never go silent for >20 seconds. Always narrating. Mindset: This is a conversation, not an exam. Interviewer is my collaborator, not adversary. FOCUS #3: USE NUMBERS TO JUSTIFY EVERY MAJOR DECISION: What I\'ll do: Calculate immediately after requirements: Storage: X GB/day, Y TB/year, Z PB (5 years). QPS: Writes per second, reads per second, peak multiplier. Bandwidth: Data transferred per second. Use these to justify: "At 500K writes/sec, single PostgreSQL (~1K writes/sec) can\'t handle load. Need sharding across 500 shards, OR switch to Cassandra (10K writes/sec/node → need 50 nodes)." "With 90% cache hit rate, only 10% of 1M QPS hits database = 100K QPS. Database needs 10 read replicas." Why this matters: Shows quantitative engineering (not hand-waving), Validates design actually works at stated scale, Demonstrates I make data-driven decisions, Impressive to interviewers (many candidates skip this). Specific tactics: Memorize key numbers: 1 day ≈ 100K seconds, Single MySQL: ~1K writes/sec, ~10K reads/sec, Redis: ~100K ops/sec, Typical cache hit: 80-90%. Round aggressively: 86,400 → 100K, 2.5M → 3M. Show work on whiteboard: Write calculations clearly so interviewer can follow. Mindset: I\'m an engineer, not a theorist. Numbers ground my design in reality. TOP 3 THINGS TO DELIBERATELY AVOID: AVOID #1: JUMPING TO SOLUTIONS BEFORE REQUIREMENTS: What I won\'t do: Hear "Design Twitter" → immediately start drawing microservices. Propose technologies (Kafka, Kubernetes) before understanding scale. Design without knowing: functional scope, user scale, performance requirements. Why avoiding: Design without context is likely wrong, Shows poor judgment (cart before horse), Miss opportunity to clarify and show questioning skills. Instead, I\'ll: Spend 5-10 minutes on requirements FIRST, Ask: "Should we support DMs? Notifications? Video? Or just tweets and timeline?", "How many DAU? Tweets per day? Read/write ratio?", "What latency is acceptable? Consistency requirements?", "Any specific constraints (budget, team size, timeline)?" Only THEN start designing with context. AVOID #2: USING BUZZWORDS WITHOUT JUSTIFICATION: What I won\'t do: Say "We\'ll use microservices" without explaining why, Propose "blockchain" or "machine learning" unless genuinely needed, Name-drop technologies (Kubernetes, Kafka, Cassandra) just to sound impressive, Use buzzwords I don\'t deeply understand. Why avoiding: Interviewer will probe deeper and expose gaps, Shows surface-level knowledge, Suggests I\'m memorizing, not thinking, Backfires spectacularly when questioned. Instead, I\'ll: For every technology, explain: "Why this over alternatives?", "What are the trade-offs?", "How does it address our specific requirements?" Example: "I\'m proposing Cassandra because: (1) We need 50K writes/sec (high throughput). (2) Eventual consistency is acceptable for social feed. (3) We need multi-region replication. Trade-off: We lose ACID transactions and join capabilities, but given our use case (simple key-value lookups), this is acceptable." Show I understand WHY, not just WHAT. AVOID #3: IGNORING INTERVIEWER FEEDBACK/HINTS: What I won\'t do: Stick rigidly to my original design when interviewer suggests alternatives, Defend my choices defensively: "No, my way is better", Ignore hints: Interviewer: "What about caching?" Me: "I don\'t think we need it." [Bad!], Continue silently without checking in. Why avoiding: Interview is collaborative assessment, Ignoring feedback looks stubborn/hard to work with, Hints are opportunities to show adaptability, Miss chance to explore topics interviewer cares about. Instead, I\'ll: Welcome feedback enthusiastically: "Great point! Let me add that.", Incorporate suggestions: Interviewer: "What about failures?" Me: "Good question! Let me discuss fault tolerance. If API server crashes, load balancer routes to healthy instances...", Periodically check in: "Does this make sense?", "Should I focus more on X or Y?", Be flexible: If interviewer wants to explore caching instead of sharding, pivot immediately. Show I\'m coachable and collaborative. ADDITIONAL REMINDERS FOR TOMORROW: 1. Draw diagram early and reference it constantly, 2. If stuck, say "Let me think through the trade-offs...", don\'t stay silent, 3. Prioritize depth over breadth: Better to deeply explore 2 components than superficially cover 10, 4. Discuss failure scenarios (don\'t just focus on happy path), 5. End with summary: key trade-offs, bottlenecks, next steps if more time. FINAL MINDSET BEFORE INTERVIEW: I\'m not trying to impress with knowledge. I\'m demonstrating: (1) Structured thinking (framework), (2) Communication (think out loud), (3) Engineering judgment (numbers, trade-offs), (4) Collaboration (incorporate feedback), (5) Depth (can dive deep into components). Follow the process, communicate clearly, stay adaptable. The solution will emerge naturally. Deep breath. I\'ve got this! 🚀',
    keyPoints: [
      'FOCUS: (1) Follow 4-step framework religiously, (2) Communicate continuously (think out loud), (3) Use numbers to justify decisions',
      'AVOID: (1) Jumping to solutions before requirements, (2) Using buzzwords without justification, (3) Ignoring interviewer feedback',
      'Mindset: Interview is collaborative conversation, not adversarial exam',
      'Prioritize depth over breadth: 2 components deeply > 10 superficially',
      'Remember: Process and communication matter more than "perfect" solution',
    ],
  },
];
