export const optionsFundamentalsQuiz = [
  {
    id: 'options-fundamentals-q-1',
    question:
      'You are building an options trading platform for retail investors. Design a "options position analyzer" that: (1) Accepts multiple option positions (calls/puts, long/short), (2) Calculates the combined payoff diagram across all price ranges, (3) Identifies breakeven points, max profit, and max loss, (4) Handles edge cases like undefined risk (naked calls), (5) Generates visualization with profit zones highlighted. Provide the system architecture, core algorithms for payoff aggregation, and explain how you would detect and warn users about high-risk positions like naked options.',
    sampleAnswer:
      'Production options position analyzer design: **Architecture**: Frontend (React) with interactive chart (Chart.js/Plotly), Backend (FastAPI) for calculations, Redis cache for common position patterns. Core engine: Python PositionAnalyzer class. **Core Algorithm - Payoff Aggregation**: (1) Data structures: @dataclass OptionLeg: option_type (call/put), strike, premium, quantity (±), style (long/short). @dataclass Position: legs List[OptionLeg], underlying_price float. (2) Aggregate payoff: For each stock price S in range [min_strike×0.7, max_strike×1.3]: total_payoff = 0; for leg in legs: if leg.option_type == "call": leg_payoff = max(S - leg.strike, 0); else: leg_payoff = max(leg.strike - S, 0); # Adjust for long/short: if leg.style == "short": leg_payoff = -leg_payoff; # Account for premium: leg_pnl = (leg_payoff - leg.premium) if long else (leg.premium - leg_payoff); total_payoff += leg_pnl × leg.quantity × 100. (3) Find breakevens: Scan price range, identify where total_payoff crosses zero (sign change). Refine using bisection method. (4) Max profit/loss: If unlimited (naked call), flag as "UNLIMITED RISK"; else: max_profit = max(payoffs); max_loss = min(payoffs). **Risk Detection**: Naked call detection: any short call without corresponding long stock or offsetting call → "⚠️ UNLIMITED RISK"; Naked put detection: short put without cash collateral → "High risk: ${strike × quantity × 100} potential loss". Margin requirements: Calculate using portfolio margin model (risk-based). **Visualization**: Three zones: Green (profit), Red (loss), Yellow (breakeven ±$100). Annotate: Strike prices as vertical lines, Breakeven points as markers, Max profit/loss labels. Interactive: Hover shows exact P&L at price. **Edge Cases**: (1) All legs expire worthless (far OTM): P&L = sum of premiums. (2) Pin risk: Stock closes exactly at strike → assignment uncertainty, show both scenarios. (3) Early assignment: For American options, note "May be assigned early if deep ITM". (4) Multiple breakevens: Complex positions (butterflies) may have 2+ breakevens. **Production Considerations**: Real-time calculation: Pre-compute for common strategies (covered call, vertical spread), Cache results with key = hash(position_legs). Error handling: Validate strikes > 0, expirations in future, quantities reasonable (<10k contracts). User warnings: "This position has undefined risk" modal for naked calls, "Consider defined-risk alternatives like spreads" suggestions. **Example Code Structure**: class PositionAnalyzer: def calculate_payoff(position, price_range): ..., def find_breakevens(payoffs, prices): ..., def classify_risk(position): ..., def generate_visualization(position): ...',
    keyPoints: [
      'Aggregate payoffs: Sum (payoff - premium) × quantity × 100 for each leg across price range',
      'Breakeven detection: Find zero-crossings in aggregate P&L curve using sign changes',
      'Risk classification: Flag naked calls (unlimited risk) and naked puts (high capital risk)',
      'Visualization: Three-zone chart (profit/loss/breakeven) with interactive hover for exact P&L',
      'Edge cases: Handle pin risk (assignment uncertainty), early assignment warnings, multiple breakevens',
    ],
  },
  {
    id: 'options-fundamentals-q-2',
    question:
      'A quant hedge fund wants to build an automated "options arbitrage detector" that scans the options chain for violations of fundamental pricing relationships (like put-call parity, intrinsic value violations, calendar spread mispricing). For each arbitrage opportunity: (1) Design detection algorithms for at least 3 types of arbitrage, (2) Calculate the exact profit per contract accounting for transaction costs, (3) Estimate execution risk (bid-ask slippage, partial fills), (4) Generate executable trade recommendations with precise entry/exit, (5) Implement safeguards against false positives (stale quotes, corporate actions). Discuss why pure arbitrage is rare in modern markets and what market conditions create opportunities.',
    sampleAnswer:
      'Automated options arbitrage detection system: **Type 1: Put-Call Parity Violation** - Theory: C - P = S - K×e^(-rT) for European options, C - P ≈ S - K for American (approximately). Detection: For each strike K and expiration T: Calculate theoretical difference: diff_theory = stock_price - strike × e^(-r×T). Get market prices: diff_market = call_mid - put_mid. Arbitrage if |diff_market - diff_theory| > transaction_costs. Profit: If diff_market > diff_theory: Sell call, buy put, buy stock, lend K×e^(-rT) → profit = (diff_market - diff_theory) × 100 - costs. Example: AAPL at $100, 100-strike call at $6, put at $5, r=5%, T=0.25 years. Theory: C - P = 100 - 100×e^(-0.05×0.25) = $1.24. Market: $6 - $5 = $1. Violation: $1.24 - $1 = $0.24 profit per share. After $0.10 total transaction costs → $0.14 × 100 = $14 per contract. **Type 2: Intrinsic Value Violation** - Detection: For ITM options, price should never be below intrinsic value (arbitrage otherwise). For call: if call_price < max(S - K, 0) - costs → buy call, exercise immediately. For put: if put_price < max(K - S, 0) - costs → buy put, exercise immediately. Implementation: if option_type == "call" and S > K: intrinsic = S - K; if call_ask < intrinsic - transaction_cost: arbitrage_profit = (intrinsic - call_ask) × 100. **Type 3: Calendar Spread Mispricing** - Theory: Longer-dated options should cost more than shorter-dated (time value). Detection: For same strike, compare near-term vs far-term: if far_term_price < near_term_price: Sell near-term, buy far-term → profit when near-term decays. Example: Jan 100 call at $5, Mar 100 call at $4.50. Violation: March should cost more. Trade: Sell Jan, buy Mar → collect $0.50 credit. If Jan expires worthless and Mar still worth $4+, profit. **Transaction Costs Modeling**: Per-contract costs: Commission: $0.65 per contract (retail) or $0.10 (institutional). Slippage: (ask - bid) / 2, typically $0.02-0.10 for liquid options. Market impact: Minimal for <100 contracts in liquid names. Total round-trip cost ≈ $0.85 retail, $0.20 institutional. Minimum arbitrage profit threshold: Must exceed 2× round-trip cost (entry + exit). **Execution Risk**: Bid-ask slippage: Quoted mid-price may not be achievable. Model as uniform distribution between bid/ask. Expected fill price: (bid + ask) / 2 ± random noise. Partial fills: May get filled on one leg but not the other (leg risk). Mitigation: Use limit orders, ensure sufficient liquidity (volume > 10× your size). Quote staleness: 15-second-old quote may no longer be valid. Filter: Only consider quotes updated within last 5 seconds, Volume > 100 contracts in last hour. **False Positive Safeguards**: Corporate actions filter: If ex-dividend date within 30 days, adjust put-call parity: C - P = S - K×e^(-rT) - PV(dividends). If stock split announced, skip (contract specs adjusting). Stale quotes: Reject if last_trade_time > 60 seconds ago. Halted stocks: Check trading status, skip if halted. Wide spreads: If (ask - bid) / mid > 0.10 (10% spread), likely illiquid → skip. **Why Arbitrage Is Rare**: Market efficiency: HFT firms exploit arbitrage in microseconds. Algo trading: Every market maker runs similar detection. Transaction costs: Small mispricings (<$0.20) don\'t cover costs. Execution risk: May only fill one leg, leaving naked exposure. **When Opportunities Arise**: Market stress: Flash crashes, VIX spikes create temporary dislocations. Low liquidity: OTM strikes, low-volume underlyings. Corporate events: Earnings, M&A create uncertainty. System outages: When algo traders go offline. Early morning: Before full liquidity. **Production System**: Real-time stream: Consume options quotes via FIX or exchange feeds. Sub-second latency: Co-located servers at exchange data centers. Risk management: Auto-kill switch if P&L < -$10K in session. Backtesting: Test on historical data, measure false positive rate. Expected profit: In 2024 markets, maybe 1-2 opportunities per day with $20-100 profit each (after costs).',
    keyPoints: [
      'Put-call parity arbitrage: If C - P ≠ S - K×e^(-rT), trade call/put/stock for risk-free profit',
      'Intrinsic value violation: Option trading below intrinsic → buy and immediately exercise',
      'Calendar spread: Longer-dated options must cost more than shorter-dated (same strike)',
      'Transaction costs critical: Need >$0.85 per contract profit to break even (retail costs)',
      'Rare in practice: HFT exploits arbitrage in microseconds; opportunities arise during market stress',
    ],
  },
  {
    id: 'options-fundamentals-q-3',
    question:
      'Explain the concept of "moneyness" and its practical implications for options trading. Design a "moneyness-based strategy selector" that recommends strategies based on: (1) Current moneyness (deep ITM, ITM, ATM, OTM, deep OTM), (2) Volatility regime (low/high), (3) Time to expiration (short/medium/long), (4) Market outlook (bullish/bearish/neutral). For each combination, recommend an optimal strategy (e.g., "ATM + high vol + short expiry + neutral → iron condor"). Provide the decision tree logic and explain why certain strategies work better in specific moneyness zones.',
    sampleAnswer:
      'Moneyness-based strategy selector: **Moneyness Implications**: ATM (at-the-money, S ≈ K): Highest time value ($3-5 for 30-day option), Highest gamma (most price-sensitive), Maximum theta decay, Highest trading volume (most liquid), Best for directional plays (maximum leverage per dollar). ITM (in-the-money): High delta (0.6-0.9 for calls), Behaves more like stock (less leverage), Lower time value ($0.50-2), Lower percentage returns but higher probability of profit, Good for conservative bullish/bearish plays. OTM (out-of-the-money): Low delta (0.1-0.4), High leverage (large % gains if stock moves), Low probability of profit, All time value (will decay to $0 if stock doesn\'t move), Good for lottery plays or selling premium. **Strategy Selection Matrix**: **Bullish Strategies**: Deep OTM + Low vol + Long expiry + Bullish → Long OTM call (cheap lottery ticket). Reasoning: Low vol = cheap premiums, Long time = opportunity for stock to rally. Example: AAPL at $150, buy 170 call (6 months out) for $2. If AAPL goes to $180, option worth $10+ (5× return). Risk: High probability of total loss if stock doesn\'t move enough. ATM + High vol + Medium expiry + Bullish → Bull call spread (defined risk). Reasoning: High vol = expensive ATM calls, Spread reduces cost, Defined max profit and loss. Example: Buy 150 call for $8, sell 160 call for $4, Net cost $4. Max profit: $10 - $4 = $6 per share (150% return) if stock > $160. ITM + Low vol + Short expiry + Bullish → Long ITM call (stock substitute). Reasoning: ITM call = high delta (moves with stock), Low vol = cheap, acts like leveraged stock. Example: AAPL at $150, buy 140 call (30 days) for $11. Stock moves to $155, option worth $15 → $4 profit on $11 investment (36% return) vs 3.3% return owning stock. **Bearish Strategies**: Deep OTM + Low vol + Long expiry + Bearish → Long OTM put. ATM + High vol + Medium expiry + Bearish → Bear put spread. ITM + Low vol + Short expiry + Bearish → Long ITM put. **Neutral Strategies**: ATM + High vol + Short expiry + Neutral → Iron condor (profit from high premium). Reasoning: High vol = inflated premiums, Short expiry = fast theta decay, Neutral = expect stock to stay in range. Example: Stock at $100, Sell 95-100 put spread, Sell 100-105 call spread. Collect $2 credit, profit if stock stays $95-$105 (breakevens). OTM + Low vol + Short expiry + Neutral → Short strangle (sell OTM call and put). Reasoning: Low vol = stock unlikely to move much, Short expiry = quick theta decay. Risk: Unlimited if stock makes big move. ATM + Low vol + Long expiry + Neutral → Calendar spread (buy far-term, sell near-term). Reasoning: Profit from time decay differential. **Volatile Strategies**: ATM + Low vol + Short expiry + Expecting volatility → Long straddle (bet on move either direction). Reasoning: Low vol = cheap options, Expect big move (earnings, FDA approval). Example: Buy 100 call and 100 put, both for $3 (total $6). Need stock to move >$6 in either direction to profit. OTM + Low vol + Short expiry + Expecting volatility → Long strangle (cheaper than straddle). Example: Buy 95 put and 105 call, Need bigger move but lower cost. **Decision Tree Implementation**: def recommend_strategy(moneyness, volatility, time_to_exp, outlook): # Volatility regime: vol_regime = "high" if IV > 50th percentile else "low"; # Time categorization: time_cat = "short" if DTE < 30 else "medium" if DTE < 90 else "long"; # Strategy lookup: if outlook == "bullish": if moneyness == "OTM" and vol_regime == "low" and time_cat == "long": return "Long OTM Call", "High risk/reward lottery play"; elif moneyness == "ATM" and vol_regime == "high": return "Bull Call Spread", "Defined risk, reduces cost"; elif moneyness == "ITM" and time_cat == "short": return "Long ITM Call", "Stock substitute with leverage"; elif outlook == "neutral": if moneyness == "ATM" and vol_regime == "high" and time_cat == "short": return "Iron Condor", "Profit from inflated premium and decay"; # ... more rules. **Why Strategies Work by Moneyness**: ATM options: Best for directional trades (highest gamma), Best for selling premium (highest theta), Most liquid (tight spreads). ITM options: Lower risk directional plays (high delta), Behave more like stock (less leverage), Good for conservative positions. OTM options: High risk/reward (low cost, low probability), Good for selling premium (high probability of expiring worthless), Defined risk for buyers (can\'t lose more than premium). **Production Implementation**: Input validation: Ensure moneyness calculated correctly (allow 2% threshold for ATM). IV percentile: Compare current IV to 252-day historical range. Risk warnings: Flag unlimited risk strategies (naked calls/puts). Backtesting: Test each strategy recommendation on historical data, show expected win rate and average P&L. User customization: Allow users to set risk tolerance (conservative/moderate/aggressive), Filter strategies by max loss, capital requirement, probability of profit.',
    keyPoints: [
      'ATM options: Highest time value, gamma, and theta decay; best for directional trades and selling premium',
      'ITM options: High delta (stock-like), lower leverage, higher probability; good for conservative plays',
      'OTM options: High leverage, low probability, all time value; good for lottery plays or premium selling',
      'Strategy selection: Combine moneyness + volatility regime + time to expiration + market outlook',
      'Example: ATM + high vol + short expiry + neutral → iron condor (profit from inflated premium decay)',
    ],
  },
];

