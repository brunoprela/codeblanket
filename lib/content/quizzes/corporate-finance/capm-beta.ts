export const capmBetaQuiz = [
    {
        id: 'capm-beta-q-1',
        question:
            'You are evaluating two acquisition targets in different industries: Target A (utility company) has historical beta of 0.5, D/E ratio of 1.5, tax rate 25%. Target B (tech company) has historical beta of 1.8, D/E ratio of 0.2, tax rate 20%. Both will be acquired with your company\'s capital structure (D/E = 0.6, tax rate 25%). Calculate: (1) Unlevered betas for both targets, (2) Relevered betas at your capital structure, (3) Cost of equity for each (Rf = 4%, MRP = 6.5%), (4) Which acquisition requires higher return and why, (5) If you use company WACC (10%) for both, what mistake are you making?',
        sampleAnswer:
            'Complete beta analysis for acquisitions: (1) Unlevered betas (remove targets\' current leverage): Target A: βU = βL / [1 + (1-T)(D/E)] = 0.5 / [1 + 0.75(1.5)] = 0.5 / 2.125 = 0.235. Target B: βU = 1.8 / [1 + 0.80(0.2)] = 1.8 / 1.16 = 1.552. Interpretation: Target A\'s business (unlevered) beta is 0.235 (very low risk—stable utility operations). Target B\'s business beta is 1.552 (high risk—volatile tech business). (2) Relevered betas (at acquirer\'s D/E = 0.6, tax = 25%): Target A: βL = βU [1 + (1-T)(D/E)] = 0.235 [1 + 0.75(0.6)] = 0.235 × 1.45 = 0.341. Target B: βL = 1.552 [1 + 0.75(0.6)] = 1.552 × 1.45 = 2.250. (3) Cost of equity (CAPM): Target A: Re = 4% + 0.341(6.5%) = 6.22%. Target B: Re = 4% + 2.250(6.5%) = 18.63%. (4) Target B requires much higher return (18.63% vs 6.22%). Why? Target B\'s core business is much riskier (tech vs utility). Business risk: Tech sector has volatile earnings, product cycles, competition. Utility has regulated, stable cash flows. When you apply same leverage (D/E = 0.6) to both, Target B\'s equity becomes extremely risky (β = 2.25) because you\'re amplifying already-high business risk. Target A stays low risk even with leverage. (5) Mistake of using company WACC (10%) for both: Company WACC reflects company\'s average risk across all existing operations. Target A (utility): Lower risk than company average → Using 10% is too high → Overvaluing. You\'d pay too much! NPV calculated at 10% is higher than true NPV at 6.22%. Target B (tech): Higher risk than company average → Using 10% is too low → Undervaluing risk. You might accept value-destroying deal! NPV at 10% looks good, but at true required return (18.63%), NPV might be negative. Correct approach: Use target-specific betas → target-specific discount rates. Target A: Use 6-7% discount rate (or specific WACC with Target A\'s cost of equity). Target B: Use 18-19% discount rate. This is "risk-adjusted" capital budgeting. Key lesson: One size (company WACC) does not fit all projects. Adjust discount rate for project-specific risk.',
        keyPoints: [
            'Unlevered betas: Target A = 0.235 (utility, low risk), Target B = 1.552 (tech, high risk)',
            'Relevered at D/E = 0.6: Target A beta = 0.341, Target B beta = 2.250',
            'Cost of equity: Target A = 6.22%, Target B = 18.63% (3x difference!)',
            'Using company WACC (10%) for both would overvalue Target A and undervalue Target B\'s risk',
            'Must use risk-adjusted discount rates based on target-specific business and financial risk',
        ],
    },
    {
        id: 'capm-beta-q-2',
        question:
            'Design a "beta calculator" production system that: (1) Calculates beta using multiple methods (regression, covariance, comparable companies), (2) Adjusts for thin trading using Dimson/Scholes-Williams corrections, (3) Performs rolling beta analysis to show stability, (4) Handles multi-business companies with bottom-up beta, (5) Includes Monte Carlo simulation for beta uncertainty. Provide architecture, algorithms, and explain how to handle edge cases (negative betas, beta > 3, private companies, financial firms).',
        sampleAnswer:
            'Production beta calculator design: (1) System architecture: Frontend: React dashboard for input and visualization. Backend: FastAPI for calculations, PostgreSQL for storing betas/historical data, Redis for caching market data, Celery for async tasks (rolling beta calculations). External APIs: Yahoo Finance/Quandl for price data, SEC EDGAR for financial data, Bloomberg/FactSet API if available. (2) Multiple beta calculation methods: Method A: OLS regression: Ri = α + β × Rm + ε. Use scipy.stats.linregress or statsmodels OLS. Return: beta (slope), alpha (intercept), R², std error, p-value. Method B: Covariance formula: β = Cov(Ri, Rm) / Var(Rm). Should match Method A exactly. Method C: Comparable companies: For private companies or recent IPOs. Find 5-10 public comps in same industry. Calculate median unlevered beta of comps. Relever for target company\'s capital structure. Code: def calculate_beta_regression(returns_stock, returns_market): from scipy.stats import linregress; slope, intercept, r_value, p_value, std_err = linregress(returns_market, returns_stock); return {\'beta\': slope, \'alpha\': intercept, \'r_squared\': r_value**2, \'p_value\': p_value, \'std_error\': std_err}. def calculate_beta_covariance(returns_stock, returns_market): cov = np.cov(returns_stock, returns_market)[0,1]; var_market = np.var(returns_market); return cov / var_market. (3) Thin trading adjustment: Problem: Thinly traded stocks don\'t trade every day. Price staleness biases beta downward. Solution: Dimson/Scholes-Williams correction. Include lagged and leading market returns in regression: Ri,t = α + β₀Rm,t + β₁Rm,t-1 + β₂Rm,t+1 + ε. Adjusted beta = β₀ + β₁ + β₂. Code: def dimson_beta(returns_stock, returns_market, lags=1): import statsmodels.api as sm; df = pd.DataFrame({\'stock\': returns_stock, \'market\': returns_market}); for i in range(1, lags+1): df[f\'market_lag{i}\'] = df[\'market\'].shift(i); df[f\'market_lead{i}\'] = df[\'market\'].shift(-i); df = df.dropna(); X = df[[col for col in df.columns if \'market\' in col]]; X = sm.add_constant(X); y = df[\'stock\']; model = sm.OLS(y, X).fit(); beta_sum = sum([model.params[col] for col in X.columns if \'market\' in col]); return beta_sum. (4) Rolling beta analysis: Calculate beta over rolling windows (e.g., 60 months). Show how beta changes over time. Detect beta instability. Code: def rolling_beta(returns_stock, returns_market, window=60): betas = []; for i in range(window, len(returns_stock)): window_stock = returns_stock[i-window:i]; window_market = returns_market[i-window:i]; beta = calculate_beta_covariance(window_stock, window_market); betas.append(beta); return betas. Visualization: Line chart of beta over time. Shade regions of high/low beta. Calculate beta stability metric: std deviation of rolling betas. (5) Bottom-up beta for multi-business companies: Input: List of business segments with revenue weights. For each segment: Get industry asset beta (from comp analysis). Calculate weighted average asset beta: βU = Σ(weight_i × βU_i). Relever for company\'s D/E: βL = βU [1 + (1-T)(D/E)]. Code: def bottom_up_beta(segments, segment_weights, de_ratio, tax_rate): asset_beta = sum([segments[seg][\'asset_beta\'] * segment_weights[seg] for seg in segments]); levered_beta = asset_beta * (1 + (1 - tax_rate) * de_ratio); return levered_beta. (6) Monte Carlo simulation for uncertainty: Beta is an estimate with uncertainty. Model uncertainty: Beta distribution (from historical data has std error). Simulate: Draw 10,000 random betas from Normal(β_estimated, std_error). Calculate cost of equity for each. Show distribution: Mean, percentiles (P10, P50, P90). Code: def monte_carlo_beta(beta_estimate, std_error, n_sims=10000): betas = np.random.normal(beta_estimate, std_error, n_sims); costs_equity = [capm(rf, beta, mrp) for beta in betas]; return {\'mean_cost\': np.mean(costs_equity), \'p10\': np.percentile(costs_equity, 10), \'p90\': np.percentile(costs_equity, 90)}. (7) Edge cases: Negative betas (β < 0): Rare but possible (gold, some hedging assets). If negative: Check if spurious (data error, thin trading). If real: Stock/asset moves opposite to market. Cost of equity < risk-free rate (hedge value). Beta > 3: Very high risk (leveraged ETFs, distressed companies, Bitcoin stocks). Verify data quality. If real: Use but apply common sense. Maybe cap at 2.5-3.0 for valuation. Private companies: No trading data → Use comparable company approach. Unlever public comps, relever for private company. Add size premium (2-5%) for small/private company risk. Financial firms (banks, insurance): Different business model. High "debt" (deposits) is operational, not financial leverage. For banks: Use only borrowed funds as "debt". Or use raw beta without unlevering/relevering. Beta instability: If rolling betas vary wildly (range > 0.5), beta is unstable. Solutions: Use longer history (10 years vs 5 years). Use industry median beta instead. Apply Vasicek shrinkage: βadjusted = w × βestimated + (1-w) × βindustry. (8) Output: Executive dashboard: Current beta, historical trend, comparable company range. Detailed report: All calculation methods, statistical tests, confidence intervals. Excel export: Beta calculations, rolling analysis, comp analysis. API endpoint: GET /api/beta/{ticker} returns JSON with beta metrics.',
        keyPoints: [
            'Multiple methods: OLS regression (primary), covariance (verify), comparable companies (private)',
            'Thin trading: Use Dimson adjustment (lagged + leading market returns) for illiquid stocks',
            'Rolling beta: 60-month windows show stability, high variance indicates unstable beta',
            'Bottom-up beta: Weight industry asset betas by revenue segments, relever for company D/E',
            'Edge cases: Negative betas (hedge assets), β>3 (verify data), private companies (use comps + size premium)',
        ],
    },
    {
        id: 'capm-beta-q-3',
        question:
            'A pharmaceutical company has two divisions: (1) Established drugs (60% of revenue, stable cash flows, comparable companies have average unlevered beta of 0.7), (2) Drug development (40% of revenue, high risk R&D, comparable biotech companies have average unlevered beta of 2.0). Company has D/E = 0.5, tax rate = 20%. The company is evaluating two projects: Project A (expand existing drug production, similar risk to established drugs division), Project B (new drug R&D, similar to development division). Calculate: (1) Company\'s overall beta (bottom-up), (2) Division-specific betas for each division, (3) Appropriate discount rates for Project A and Project B (Rf = 4%, MRP = 6.5%, cost of debt = 5% pre-tax), (4) If Project A has expected cash flows of $50M/year for 5 years with $150M investment, calculate NPV using correct and incorrect discount rates to show the impact.',
        sampleAnswer:
            'Division-specific beta and project evaluation: (1) Company\'s overall beta (bottom-up): Step 1: Calculate weighted average asset beta: βU_company = 0.60(0.7) + 0.40(2.0) = 0.42 + 0.80 = 1.22. Step 2: Relever for company D/E: βL_company = 1.22 [1 + (1-0.20)(0.5)] = 1.22 × 1.40 = 1.708. Company beta = 1.71. This is if you looked up company beta in Bloomberg—it reflects both divisions. (2) Division-specific levered betas: Division 1 (Established drugs): Asset beta = 0.7. Relever at company D/E (assume both divisions use same leverage): βL_div1 = 0.7 [1 + 0.80(0.5)] = 0.7 × 1.40 = 0.98. Division 2 (Drug development): Asset beta = 2.0. βL_div2 = 2.0 [1 + 0.80(0.5)] = 2.0 × 1.40 = 2.80. (3) Discount rates for projects: Project A (expand production, like Division 1): Use Division 1 beta = 0.98. Cost of equity: Re = 4% + 0.98(6.5%) = 10.37%. Calculate project WACC: Assume capital structure E = 67%, D = 33% (from D/E = 0.5). After-tax cost of debt: Rd(1-T) = 5%(1-0.20) = 4.0%. WACC_A = 67%(10.37%) + 33%(4.0%) = 6.95% + 1.32% = 8.27%. Project B (new R&D, like Division 2): Use Division 2 beta = 2.80. Cost of equity: Re = 4% + 2.80(6.5%) = 22.20%. WACC_B = 67%(22.20%) + 33%(4.0%) = 14.87% + 1.32% = 16.19%. Huge difference! Project A: 8.27% vs Project B: 16.19%. (4) Project A NPV analysis: Correct approach (use division-specific WACC = 8.27%): PV of cash flows = $50M × [(1 - 1.0827^-5) / 0.0827] = $50M × 3.991 = $199.55M. NPV = $199.55M - $150M = $49.55M. Decision: Strong accept! Incorrect approach (use company WACC): If you mistakenly used overall company WACC, what would it be? Company cost of equity: Re = 4% + 1.71(6.5%) = 15.12%. Company WACC = 67%(15.12%) + 33%(4.0%) = 10.13% + 1.32% = 11.45%. NPV at 11.45%: PV = $50M × [(1 - 1.1145^-5) / 0.1145] = $50M × 3.657 = $182.85M. NPV = $182.85M - $150M = $32.85M. Still positive, but $16.7M less than correct NPV! Impact: Using company WACC (11.45%) instead of division WACC (8.27%): Understates NPV by $16.7M (25% error). Might lead to rejecting marginal projects that are actually value-creating. For Project B (high-risk R&D): If you used company WACC (11.45%) instead of correct WACC (16.19%): You\'d massively overvalue risky R&D projects. Accept value-destroying projects! This is why division/project-specific discount rates are critical. Alternative calculation—without WACC, just use cost of equity for all-equity financed projects: Project A: Discount at 10.37% (Division 1 cost of equity). Project B: Discount at 22.20% (Division 2 cost of equity). Key insight: High-growth, risky divisions require much higher returns. Stable divisions can justify lower returns. Using one company-wide hurdle rate leads to: Over-investment in risky projects (under-discounting risk). Under-investment in stable projects (over-discounting). Portfolio shifts toward high-risk/high-beta projects over time. Company becomes riskier overall. Solution: Use division/project-specific discount rates based on comparable company betas.',
        keyPoints: [
            'Company beta (bottom-up): 1.71 (weighted average of 0.98 stable and 2.80 R&D divisions)',
            'Project A discount rate: 8.27% (low-risk production expansion)',
            'Project B discount rate: 16.19% (high-risk R&D) — 2x higher!',
            'Using company WACC (11.45%) instead of project-specific rates understates Project A NPV by $16.7M',
            'Critical lesson: One-size-fits-all discount rate leads to poor capital allocation—over-invest in risky projects',
        ],
    },
];

