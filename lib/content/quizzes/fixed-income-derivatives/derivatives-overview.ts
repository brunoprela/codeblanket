export const derivativesOverviewQuiz = [
  {
    id: 'do-q-1',
    question:
      'Design a comprehensive derivatives pricing library that supports: (1) Multiple contract types (forwards, futures, swaps, options), (2) Multiple underlying assets (bonds, interest rates, currencies, equities, commodities), (3) Pricing models (Black-Scholes, Black, Hull-White, HJM for interest rates), (4) Greeks calculation (delta, gamma, vega, theta, rho, and cross-Greeks), (5) Risk analytics (VaR, stress testing, scenario analysis). Architecture requirements: Plugin system for adding new derivative types, vectorized pricing (batch 1000+ contracts simultaneously), caching (avoid repricing unchanged contracts), parallel execution (multi-core), real-time market data integration. How do you handle: term structure models (forward rates, volatility surfaces)? American vs European exercise? Dividends and carry costs? Numerical methods (trees, Monte Carlo, finite differences)?',
    sampleAnswer:
      'Derivatives pricing library architecture: Contract abstraction: Base class: class Derivative(ABC): @abstractmethod price(), @abstractmethod greeks(), underlying_asset, expiry, notional, Specific contracts inherit: ForwardContract(Derivative), FuturesContract(Derivative), SwapContract(Derivative), EuropeanOption(Derivative), AmericanOption(Derivative), AsianOption(Derivative), Plugin system: Registry: DERIVATIVE_TYPES = {"forward": ForwardContract, "european_call": EuropeanOption, ...}, Factory pattern: create_derivative(type, params), Custom derivatives: register_derivative_type("barrier_option", BarrierOption), Pricing model abstraction: Base: class PricingModel(ABC): @abstractmethod price_derivative(), Models: BlackScholesModel (equity options), BlackModel (futures options), BinomialTreeModel (American options), MonteCarloModel (path-dependent options), HullWhiteModel (interest rate derivatives), Model selection: Auto-select based on derivative type and exercise style, Override: derivative.price(model=specific_model), Underlying asset classes: Base: class UnderlyingAsset: spot_price, volatility, dividend_yield, Specific: BondAsset (yield, duration, convexity), InterestRateAsset (term_structure, mean_reversion), CurrencyPair (domestic_rate, foreign_rate), EquityAsset (dividend_schedule), CommodityAsset (storage_cost, convenience_yield), Term structure handling: Zero curve: Store (maturity, zero_rate) pairs, interpolation (cubic spline), Forward curve: Derive from zero curve, f(t,T) = (r_T×T - r_t×t) / (T-t), Volatility surface: Store (strike, expiry, implied_vol), interpolate using SABR or local vol model, Update: Real-time market data feeds update term structures, Greeks calculation: Analytical: For Black-Scholes, closed-form Greeks (delta, gamma, vega, theta, rho), Numerical: Bump-and-reprice for complex derivatives: delta = (price(S+ΔS) - price(S-ΔS)) / (2ΔS), parallel shift for all Greeks, Cross-Greeks: Delta-gamma (∂²V/∂S²), vega-delta (∂²V/∂S∂σ), Vectorization: Numpy arrays for batch calculation, Vectorized pricing: Input: DataFrame of 1000+ contracts with parameters, Numpy arrays: spot_prices = np.array([110, 111, 112, ...]), strikes = np.array([112, 112, 113, ...]), expiries = np.array([0.25, 0.5, 1.0, ...]), Black-Scholes vectorized: d1 = (np.log(spot_prices/strikes) + (r + 0.5*sigma**2)*expiries) / (sigma*np.sqrt(expiries)), prices = spot_prices * norm.cdf(d1) - strikes * np.exp(-r*expiries) * norm.cdf(d2), Output: Array of 1000+ prices computed simultaneously, Performance: 10,000 vanilla options in <1 second, Caching system: Contract hash: Hash(type, underlying, strike, expiry, model, market_data_timestamp), Cache: {hash: (price, greeks, timestamp)}, Invalidation: If market data updates, invalidate cached values, LRU cache: Keep 10,000 most recent pricings, Memory: ~100MB for typical portfolio, TTL: Cache valid for 60 seconds (real-time pricing), American option pricing: Binomial tree: Build price tree backward from expiry, at each node: early_exercise = max(intrinsic_value, hold_value), optimal_exercise = max(early_exercise), CRR parameters: u = exp(σ√dt), d=1/u, p = (exp(rdt)-d)/(u-d), Steps: 100-500 (balance accuracy vs speed), Vectorize: Numpy arrays for entire tree (avoid loops), Parallel execution: Multi-process: For portfolio of 10,000 contracts, split into chunks: [0:2500], [2500:5000], [5000:7500], [7500:10000], 4 processes (one per chunk), Price concurrently, Aggregate results, Target: 10,000 complex derivatives in <10 seconds (4-core machine), Monte Carlo: For path-dependent (Asian, lookback, barrier options), Paths: 10,000-100,000 simulations, GBM: S_t = S_0 × exp((r - 0.5σ²)t + σ√t×Z), Z ~ N(0,1), Payoff: Average payoffs across all paths, Standard error: SE = σ_payoff / √N, reduce with antithetic variates, Parallel: Each core runs independent simulations, aggregate, Risk analytics: VaR (Value at Risk): Historical simulation: Reprice portfolio under past 250 days of market moves, sort P&L, 95% VaR = 5th percentile loss, Monte Carlo VaR: Simulate 10,000 market scenarios, reprice portfolio, VaR = percentile, Parametric VaR: VaR = Portfolio_value × σ_portfolio × Z_α (assumes normal), Greeks-based: ΔPortfolio ≈ Δ×ΔS + 0.5×Γ×ΔS², faster but approximate, Stress testing: Scenarios: Rate shock +200bp, Vol spike +10%, Credit spread widening +100bp, Custom: 2008 financial crisis replay, Reprice: Full revaluation under stressed parameters, Report: Max loss under each scenario, API design: POST /derivatives/price with {type, underlying, strike, expiry, ...} returns {price, greeks}, POST /derivatives/batch-price with [{contract1}, {contract2}, ...] returns vectorized prices, GET /derivatives/risk with {portfolio_id} returns {var, stress_tests, sensitivities}, WebSocket /ws/derivatives-prices for streaming real-time prices.',
    keyPoints: [
      'Architecture: Base Derivative class, plugin registry, Factory pattern, supports forwards/futures/swaps/options, auto-select pricing model (Black-Scholes/Black/HullWhite)',
      'Vectorization: Numpy arrays for batch pricing, 10,000 vanilla options <1sec, avoid Python loops, parallel multi-core execution for complex derivatives',
      'Caching: Hash(contract, market_data, timestamp), LRU cache 10K contracts, 60sec TTL, invalidate on market data update, ~100MB memory typical',
      'American options: Binomial tree (CRR), 100-500 steps, backward induction with early exercise check, vectorize tree arrays, parallel for portfolio',
      'Risk analytics: VaR (historical/Monte Carlo/parametric/Greeks-based), stress testing (rate shock, vol spike, credit scenarios), full revaluation or Greeks approximation',
    ],
  },
  {
    id: 'do-q-2',
    question:
      'Build a mark-to-market (MTM) and margin management system for derivatives trading that: (1) Calculates daily MTM for all positions (forwards, futures, swaps, options), (2) Tracks initial and maintenance margin requirements by exchange (CME, ICE, Eurex have different rules), (3) Generates margin calls when account falls below maintenance, (4) Handles variation margin (daily settlement for futures), (5) Manages collateral (cash, Treasury bonds with haircuts). Requirements: Real-time position tracking, multiple currencies (FX conversion), netting (offset positions in same underlying), portfolio margining (cross-margining benefits). How do you handle: intraday margin calls (extreme moves)? Collateral substitution (cash vs bonds)? Margin model risk (SPAN vs VAR-based)?',
    sampleAnswer:
      'MTM and margin management system: Position tracking: Schema: positions (position_id, derivative_type, underlying, quantity, entry_price, current_price, mtm, account_id), Real-time: Update current_price from market data feeds (every second), WebSocket subscriptions to exchange feeds, MTM calculation: Forwards/Futures: mtm = (current_price - entry_price) × quantity × multiplier, Example: Long 10 10yr futures, entry 110, current 111, MTM = (111-110) × 10 × $100,000 = $1,000,000 gain, Swaps: mtm = PV(remaining fixed leg) - PV(remaining floating leg), re-calculate daily using updated curve, Options: mtm = current_option_price × quantity × multiplier, reprice daily using Black-Scholes with updated vol surface, Aggregate: Portfolio_MTM = Σ mtm_i across all positions, Exchange margin rules: CME (Chicago Mercantile Exchange): SPAN (Standard Portfolio Analysis of Risk), Risk arrays: Scenarios (16 price scenarios, volatility up/down), calculate P&L under each, Margin = max_loss across scenarios + liquidity charge, Example: Treasury futures SPAN margin ~$4,000 per contract, ICE (Intercontinental Exchange): Similar to SPAN but different parameters, Eurex: Prisma margin model (similar concept, different risk scenarios), Database: margin_rules (exchange, contract, initial_margin, maintenance_margin, method), Initial vs Maintenance margin: Initial margin: Required to open position, Typical: 4-10% of notional for futures, higher for options, Example: Treasury futures $100K notional, initial margin $4,000, Maintenance margin: Minimum balance to keep position open, Typical: 75-80% of initial margin, Example: Maintenance = $3,000, Account balance: Start: $10,000, open position (use $4,000 margin), available = $6,000, MTM loss $2,000 → balance = $8,000, position margin $4,000, excess = $4,000, If MTM loss $7,500 → balance = $2,500 < maintenance $3,000 → margin call, Variation margin (daily settlement): Futures: Settled daily, gains/losses posted to account, Day 1: Long 10 futures @ 110, Day 2: Futures settle @ 111, gain $1,000,000 posted (credited), Day 3: Futures settle @ 110.5, loss $500,000 posted (debited), Cash flows: Unlike forwards (settle at maturity), futures cash flows daily, Margin call generation: Check: For each account, for each position: current_balance + mtm - initial_margin_used, If < maintenance_margin: Generate margin call, Notification: Email + SMS to trader, Flag: account_status = "margin_call", give 1 hour to deposit funds or positions liquidated, Intraday margin calls: Monitoring: Real-time check during trading hours (not just end-of-day), Triggers: If MTM loss > 50% of available margin (warning), If MTM loss > maintenance threshold (immediate call), Example: Extreme market move (Treasury flash crash), futures drop 5 points in minutes, instant calls generated, Auto-liquidation: If not met within 1 hour, broker closes positions (reduce risk), Collateral management: Types: Cash (USD, EUR, GBP, etc.) = 100% value, no haircut, Treasury bonds = 95-98% value (2-5% haircut based on duration), Corporate bonds = 80-90% value (higher haircut), Equities = 50-70% value (volatile, higher haircut), Haircut calculation: Position margin requirement = $10,000, Post Treasury bonds worth $10,500 face value, Haircut 2% → collateral value = $10,500 × 0.98 = $10,290 > $10,000 ✓, Collateral substitution: Trader has excess cash, requests to substitute with bonds (higher yield on bonds), Calculate: Required bond face value = margin / (1 - haircut), Approve if bonds acceptable quality (Treasuries/agencies), Update collateral_holdings table, FX conversion: Multi-currency: Positions in EUR futures, margin in USD, Convert: EUR_margin × USD_EUR_rate = USD_equivalent, Update: Real-time FX rates, recalculate every minute, FX risk: If USD weakens vs EUR, margin requirement in USD increases, add FX buffer (5-10% extra margin), Netting and offsets: Same underlying: Long 10 futures, Short 5 futures = net 5 long, Margin: Calculate on net 5 position (not 15 separate), 15 × $4,000 = $60,000 without netting, 5 × $4,000 = $20,000 with netting, save $40,000 capital, Spreads: Long 10yr futures, Short 2yr futures (curve trade), Exchanges offer reduced margin for correlated positions, Might be 30-50% lower than separate margins, Portfolio margining: Cross-margining: Positions in correlated products offset (Treasuries + Eurodollar futures), Calculate portfolio risk holistically (diversification benefit), Instead of: $4K margin for 10yr + $2K for 2yr = $6K, Portfolio margin: $4.5K (recognize negative correlation), SPAN: Automatically calculates portfolio effects, VAR-based: Some exchanges use VAR for margining (similar to initial margin), calculate 99% 1-day VAR for portfolio, Margin model risk: SPAN: Based on scenarios (deterministic), may not capture tail risks, 2008: SPAN margins insufficient, exchanges raised margins 3-5x mid-crisis, VAR: Model-dependent (assumes distribution, correlations), Model breaks in crisis (correlations → 1, volatility spikes), Backtesting: Daily check if margin would have covered actual losses, If breaches > 1% of days, increase margin buffer, API design: GET /margin/requirements?account_id=XXX returns {initial, maintenance, excess}, POST /margin/call-check returns list of accounts with calls, POST /collateral/post with {account_id, collateral_type, amount}, GET /margin/forecast?position={new_trade} returns margin impact before trading.',
    keyPoints: [
      'MTM calculation: Futures/forwards (current-entry)×quantity×mult, swaps PV(fixed-float), options reprice daily, aggregate portfolio MTM, real-time updates',
      'Margin: Initial (open position, 4-10% notional), Maintenance (75-80% of initial), margin call if balance < maintenance, 1hr to meet or liquidate',
      'Variation margin: Futures settle daily (gains/losses posted), intraday calls on extreme moves (>50% available), auto-liquidation if not met',
      'Collateral: Cash 100%, Treasuries 95-98% (haircut 2-5%), corporates 80-90%, equities 50-70%, substitution allowed, FX convert multi-currency with buffer',
      'Netting: Offset same underlying (long 10 - short 5 = net 5), portfolio margining (cross-margin correlated positions), SPAN/VAR methods, save 30-50% capital',
    ],
  },
  {
    id: 'do-q-3',
    question:
      'Implement an option Greeks calculation and hedging system that: (1) Calculates all first-order Greeks (delta, vega, theta, rho) and second-order (gamma, vanna, volga), (2) Aggregates portfolio Greeks across multiple options/underlyings, (3) Recommends hedges to neutralize specific Greeks (delta-neutral, gamma-neutral, vega-neutral), (4) Dynamically rebalances as market moves (maintain neutrality), (5) Tracks hedge performance (P&L attribution to Greeks vs unexplained). Requirements: Support vanilla and exotic options, handle discrete dividends/payments, account for bid-ask spreads in hedging costs. How do you handle: Greek approximations breaking down (large moves)? Hedge ratios changing (dynamic delta)? Transaction costs eroding profits? Volatility smile (strike-dependent vol)?',
    sampleAnswer:
      "Option Greeks and hedging system: Greeks calculation library: Analytical (Black-Scholes): Delta: ∂V/∂S = N(d1) for calls, N(d1)-1 for puts, Gamma: ∂²V/∂S² = N'(d1) / (S×σ×√T), Vega: ∂V/∂σ = S×N'(d1)×√T, Theta: ∂V/∂t (time decay, formula complex), Rho: ∂V/∂r = K×T×e^(-rT)×N(d2) for calls, Second-order: Vanna: ∂²V/∂S∂σ = -N'(d1)×d2 / (σ×√T), Volga: ∂²V/∂σ² = S×N'(d1)×√T×d1×d2/σ, Numerical (for exotics): Bump-and-reprice: Delta: delta = (V(S+1) - V(S-1)) / 2, Gamma: gamma = (V(S+1) - 2×V(S) + V(S-1)) / 1², Vega: vega = (V(σ+0.01) - V(σ-0.01)) / 2, Accurate but computationally expensive (reprice 3 times per Greek), Portfolio aggregation: Sum Greeks: Portfolio_delta = Σ delta_i × quantity_i × multiplier_i, Example: Long 100 calls (delta 0.6) = +60 delta, Short 50 puts (delta -0.4) = +20 delta, Total = +80 delta (equivalent to long 80 shares), Weighted: For different underlyings, convert to common base (e.g., USD notional), Correlation: If trading options on correlated assets, adjust for correlation matrix, Risk limits: Max_delta = ±1000 shares equivalent, Max_gamma = ±500, Max_vega = ±$100,000 per 1% vol move, Alert if approaching limits, Hedging strategies: Delta hedging: Goal: Make portfolio insensitive to small underlying moves, Hedge: Short Portfolio_delta shares of underlying, Example: Portfolio delta = +80, short 80 shares of stock/futures, net delta = 0, Rebalancing: As underlying moves, delta changes (gamma effect), rebalance daily or when delta > threshold (±10 shares), Gamma hedging: Problem: Delta hedging only works for small moves (linear approximation), Need: Gamma-neutral to protect against large moves, Hedge: Trade options to offset gamma, Example: Portfolio gamma = +50, sell options with gamma +50, net gamma = 0, Trade-off: Gamma hedging uses options (costs premium, theta decay), Vega hedging: Goal: Insensitive to volatility changes, Hedge: Trade options on different strikes/expiries to offset vega, Example: Portfolio vega = +$100K (benefit from vol increase), sell options with vega +$100K, Combined neutrality: Delta-gamma-vega neutral: requires trading multiple option instruments, System: Linear optimization to find hedge portfolio: min (Σ costs) subject to Δ_portfolio=0, Γ_portfolio=0, V_portfolio=0, Dynamic rebalancing: Triggers: Time-based: Rebalance daily at 3pm ET, Delta threshold: Rebalance when |delta| > tolerance (10 shares), Underlying move: Rebalance if underlying moves >2%, Volatility change: Rebalance if implied vol changes >2%, Calculation: New Greeks after market moves, Required hedge adjustments: Δ_hedge_new - Δ_hedge_old, Execute trades to adjust hedge, Transaction costs: Bid-ask spreads: Stock: 1-5 cents per share, Options: 5-20 cents per contract (wider for illiquid), Estimate cost: trades × spread / 2 (cross the spread), Commission: $0.50-$1.00 per option contract, Slippage: Market impact on large orders (1-3% for >10% ADV), Trade-off: Frequent rebalancing (tighter hedge, higher costs), Infrequent (drift from neutral, lower costs), Optimal: Rebalance when expected P&L benefit > transaction costs, Greek approximation limits: Linear (delta) breaks: For large moves (>5%), delta hedge has error, Gamma provides second-order correction: ΔV ≈ Δ×ΔS + 0.5×Γ×ΔS², Example: S moves from 100 to 110 (10% jump), Linear: ΔV = 0.6 × 10 = $6, Gamma-adjusted: ΔV = 0.6×10 + 0.5×0.05×100 = $6 + $2.5 = $8.5, Higher-order terms: Ignored in practice (speed, vanna, charm), only matter for huge moves, Solution: Rebalance frequently (keep moves small), or use full revaluation, Volatility smile: Problem: Black-Scholes assumes constant vol, but market has vol skew/smile, different strikes → different implied vols, Impact on Greeks: Delta calculated with at-the-money vol may be wrong for OTM options, True delta should use strike-specific vol, Adjustments: Sticky strike: Vol stays with strike (Δvol/ΔS = 0), Sticky delta: Vol moves with moneyness (Δvol/ΔS ≠ 0), Vanna captures this: ∂²V/∂S∂σ, Practical: Use local volatility or stochastic vol models (Heston), or manually adjust delta using observed smile, Discrete dividends: Problem: Underlying jumps on ex-dividend date (stock drops by dividend amount), Options: American options may exercise early before dividend, European: Discount dividend PV from spot price, Adjusted spot: S_adj = S - PV(dividends), Greeks: Calculate using S_adj, Delta jumps on ex-date (discrete change), P&L attribution: Track: Realized P&L daily, Expected P&L from Greeks: P&L_expected = Δ×ΔS + 0.5×Γ×ΔS² + V×Δσ + Θ×Δt, Unexplained: P&L_unexplained = P&L_realized - P&L_expected, Analysis: If large unexplained: Model risk (wrong vol, smile effects), Execution slippage, Discrete events (dividends, earnings), Improve models based on unexplained patterns, API design: GET /greeks/portfolio?account_id=XXX returns aggregated portfolio Greeks, POST /hedge/recommend with {target_delta, target_gamma, target_vega} returns hedge trades, POST /hedge/execute with {hedge_trades} executes and updates positions, GET /hedge/performance returns P&L attribution to Greeks.",
    keyPoints: [
      'Greeks: Analytical (Black-Scholes closed-form) for vanilla, numerical (bump-reprice) for exotics, aggregate portfolio: Σ greek_i × quantity_i',
      'Delta hedging: Short portfolio_delta shares, rebalance daily or when |delta|>threshold, transaction costs (bid-ask, commission, slippage), optimal frequency',
      'Gamma hedging: Trade options to offset gamma, protects against large moves, delta hedge linear approximation breaks >5% moves, gamma-corrects: 0.5×Γ×ΔS²',
      'Vega hedging: Trade options different strikes/expiries to offset vega, neutralize volatility risk, combined delta-gamma-vega neutral requires optimization',
      'Volatility smile: Strike-dependent vol, use local vol or stochastic vol (Heston), vanna captures ∂²V/∂S∂σ, discrete dividends (adjust spot, delta jumps ex-date)',
    ],
  },
];
