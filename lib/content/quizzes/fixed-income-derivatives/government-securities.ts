export const governmentSecuritiesQuiz = [
  {
    id: 'gs-q-1',
    question:
      'Build a Treasury market data system that: (1) Fetches real-time Treasury yields from FRED API (3-month to 30-year), (2) Constructs daily yield curve and stores historical time series, (3) Calculates breakeven inflation from nominal Treasuries and TIPS, (4) Detects curve inversions and generates alerts (2yr-10yr spread crossing negative), (5) Provides API for other systems to query current rates. Requirements: Handle missing data (some maturities may not trade daily), interpolate yield curve for off-the-run maturities, cache results (refresh every 15 minutes during market hours), historical database (10+ years for analysis). How do you handle: FRED API rate limits (120 calls/minute)? Holiday schedules (markets closed)? Yield curve smoothing (Nelson-Siegel model)? Integration with corporate bond pricing systems?',
    sampleAnswer:
      'Treasury data system architecture: FRED API integration: Setup: Register for free API key at fred.stlouisfed.org, rate limit 120 calls/minute, Series IDs: DGS3MO (3-month), DGS2 (2-year), DGS5, DGS10, DGS20, DGS30, TIPS: DFII5, DFII10, DFII30, Fetch logic: Schedule: Every 15 minutes during market hours (9am-4pm ET), use cron or Celery beat, Outside hours: Check once at 5pm for final settlement values, API call: GET https://api.stlouisfed.org/fred/series/observations?series_id=DGS10&api_key=XXX, Parse JSON response: observations[0].value = latest yield, Error handling: If missing (holiday/no trading): Use previous business day value, if series returns null: Skip and log warning (some maturities thin), Rate limit management: Batch requests: Fetch all series in single wave (10 series = 10 calls), Sleep between batches: time.sleep(1) to stay under 120/min limit, Cache: Store responses 15min, avoid redundant calls, Yield curve construction: Data points: Store (maturity_years, yield) for each available Treasury, Interpolation methods: Linear: Simple but creates kinks, Cubic spline: Smooth but can overshoot, Nelson-Siegel: β₀ + β₁×[(1-exp(-m/τ))/(m/τ)] + β₂×[(1-exp(-m/τ))/(m/τ) - exp(-m/τ)], fit parameters (β₀, β₁, β₂, τ) to minimize SSE, Preferred: Nelson-Siegel for smoothness and realistic shapes, Off-the-run interpolation: Query rate(7yr) but only have 5yr and 10yr data, interpolate: rate_7yr = rate_5yr + (7-5)/(10-5) × (rate_10yr - rate_5yr) for linear, or evaluate NS model at t=7, Historical storage: Schema: treasury_yields (date, maturity, yield, source), Index: (date, maturity) for fast range queries, Partitioning: By month for 10+ year history, Retention: Keep daily data forever (small size ~1KB/day), Aggregate: Monthly averages for long-term analysis, Breakeven inflation: Calculation: For each maturity (5, 10, 30 year): nominal_yield = get_yield(f"DGS{maturity}"), tips_real_yield = get_yield(f"DFII{maturity}"), breakeven = nominal_yield - tips_real_yield, Store: (date, maturity, breakeven_inflation), Interpretation: Market expectation of average inflation, 10yr breakeven = 2.5% means market expects 2.5% annual inflation, Alert if breakeven > 3% (high inflation expectations) or < 1% (deflation fears), Inversion detection: Monitor spreads: spread_2y10y = yield_10yr - yield_2yr, spread_3m10y = yield_10yr - yield_3mo, Historical: Calculate daily since 1980, Alert logic: If spread_2y10y crosses 0 (positive → negative): Send alert "Yield curve inverted", Context: Every recession preceded by inversion (6-24 month lead), If spread_2y10y < -50bp: Send "Deep inversion" (strong recession signal), Track duration: days_inverted counter for how long curve stays inverted, Holiday handling: Market holidays: NYSE calendar (New Year, MLK Day, Presidents, Good Friday, Memorial, July 4, Labor, Thanksgiving, Christmas), If today is holiday: Skip fetch, use previous business day value, Business day calculation: Use numpy.is_busday() or pandas BDay offset, Last valid value: Store last_valid_date for each series, if today holiday, return data from last_valid_date, Data quality checks: Validation: yield > 0 and yield < 10% (sanity check), if yield changes >200bp in one day: Flag as suspicious, review manually, Outlier detection: Z-score = (yield - rolling_mean) / rolling_std, if |Z| > 3, potential error, Cross-check: 2yr should be close to Fed Funds + expectations, 30yr should be highest (normal curve), Yield curve smoothing: Raw data: May have noise (bid-ask bounce, thin trading), Exponential smoothing: smoothed_t = α × raw_t + (1-α) × smoothed_(t-1), α = 0.3 for some smoothness while responsive, Alternative: Kalman filter for optimal smoothing with uncertainty estimates, Integration with corporate bonds: API endpoint: GET /treasury/yield?maturity=10yr returns current 10yr yield, Corporate bond systems call this to get risk-free rate, calculate: corporate_spread = corporate_yield - treasury_yield(same_maturity), Batch endpoint: POST /treasury/curve with {date} returns full curve for backtesting, WebSocket: /ws/treasury-updates for real-time yield changes (pricing systems subscribe), API design: GET /treasury/rates returns {3mo: 5.2, 2yr: 4.5, 10yr: 4.25, ...}, GET /treasury/breakeven returns {5yr: 2.3, 10yr: 2.5, 30yr: 2.4}, GET /treasury/inversion returns {is_inverted, spread_2y10y, days_inverted, historical_inversions}, GET /treasury/historical?start_date=2020-01-01&end_date=2023-12-31 returns time series, WebSocket /ws/yields for real-time updates.',
    keyPoints: [
      'FRED API: Fetch DGS3MO to DGS30 + TIPS (DFII5/10/30), rate limit 120/min, batch requests, cache 15min, handle holidays (use previous business day)',
      'Yield curve: Interpolate using Nelson-Siegel (β₀+β₁×f₁(m,τ)+β₂×f₂(m,τ)), smooth and realistic, fit to minimize SSE, query any maturity',
      'Breakeven inflation: nominal - TIPS real yield, market expectation of average inflation, alert if >3% (high) or <1% (deflation), store time series',
      'Inversion detection: Monitor spread_2y10y, alert when crosses 0, track days_inverted, historical context (recession predictor), deep inversion <-50bp',
      'Historical storage: (date, maturity, yield) table, index on (date, maturity), partition by month, 10yr+ retention, aggregate monthly for long-term analysis',
    ],
  },
  {
    id: 'gs-q-2',
    question:
      'Design a TIPS (Treasury Inflation-Protected Securities) valuation and trading system that: (1) Calculates inflation-adjusted principal from CPI data, (2) Prices TIPS using real yield curve, (3) Compares TIPS vs nominal Treasuries (breakeven analysis), (4) Recommends trades (buy TIPS if expected inflation > breakeven, buy nominal if expected < breakeven), (5) Accounts for tax treatment (inflation adjustment taxable annually as "phantom income"). Include: CPI data fetching (BLS API), deflation floor (principal never below par), semi-annual coupon on adjusted principal, real yield interpolation. How do you handle: CPI lag (CPI data released monthly with 2-week lag)? Reference CPI (3-month lag for TIPS pricing)? Tax drag from phantom income? Liquidity differences (TIPS less liquid than nominal)?',
    sampleAnswer:
      'TIPS valuation system: CPI data management: Source: Bureau of Labor Statistics (BLS) API or FRED, Series: CPIAUCSL (CPI for All Urban Consumers), fetch monthly, Release schedule: Mid-month for previous month (e.g., Feb 15 releases Jan CPI), Lag: ~2 weeks behind actual month, Storage: (date, cpi_value, series_id), index on date, Reference CPI for TIPS: TIPS use 3-month lagged CPI for pricing, Calculation: If valuation date = June 15, reference CPI = March CPI (3 months prior), Reason: Avoids pricing uncertainty (CPI known), Update: CPI for current month unknown, use 3-month-old value, Index ratio: Index_ratio = Reference_CPI / Base_CPI (at issuance), Adjusted principal calculation: Formula: Adjusted_principal = Original_principal × Index_ratio, Example: Original = $1,000, Base_CPI = 260, Current_CPI = 280, Index_ratio = 280/260 = 1.0769, Adjusted = $1,000 × 1.0769 = $1,076.90, Deflation floor: If CPI falls (Index_ratio < 1.0), principal stays at $1,000 (never below par), Protects investors from deflation, At maturity: Receive max(Adjusted_principal, Original_principal), Coupon payment: Semi-annual coupon = (Coupon_rate × Adjusted_principal) / 2, Example: 2.5% coupon, Adjusted_principal = $1,076.90, Payment = 2.5% × $1,076.90 / 2 = $13.46, Grows with inflation: Higher CPI → higher adjusted principal → higher dollar coupons, Pricing TIPS: Discount using real yield curve: Real_yields = get_tips_yields() from FRED (DFII5, DFII10, DFII30), Interpolate for exact maturity using cubic spline or Nelson-Siegel, Discount cash flows: For each future coupon date t: Project_CPI_t = Current_CPI × (1 + inflation_forecast)^t, Adjusted_principal_t = Original × (CPI_t / Base_CPI), Coupon_t = Coupon_rate × Adjusted_principal_t / 2, Discount: PV_t = Coupon_t / (1 + real_yield/2)^(2t), Sum all PV_t + PV(final adjusted principal), Breakeven inflation analysis: For same maturity: Nominal_yield = Treasury yield (e.g., 10yr at 4.25%), TIPS_real_yield = TIPS yield (e.g., 10yr at 2.00%), Breakeven = Nominal - Real = 4.25% - 2.00% = 2.25%, Interpretation: If average inflation > 2.25% over 10 years, TIPS outperform, If average inflation < 2.25%, nominal Treasuries outperform, Trading recommendations: Forecast inflation: Use Fed projections, economist consensus, market indicators (CPI, PCE, core inflation trends), Compare to breakeven: If forecast = 3.0% and breakeven = 2.25%: Recommendation = "BUY TIPS", Expected outperformance = 3.0% - 2.25% = 0.75%/year, If forecast = 1.5% and breakeven = 2.25%: Recommendation = "BUY Nominal Treasuries", TIPS overpriced (market expects too much inflation), Confidence levels: High conviction if forecast vs breakeven diff > 1%, Low conviction if diff < 0.5% (within forecast error), Tax treatment: Inflation adjustment taxable: Each year, Adjusted_principal - Prior_principal = "phantom income", Taxed as ordinary income even though not received until maturity, Example: Year 1: CPI increases 3%, Principal $1,000 → $1,030, Phantom income = $30 (taxed at ordinary rate ~37% for high earners), Cash tax = $30 × 37% = $11.10 owed, but no cash received, Tax drag calculation: After-tax real return = Nominal_return - Tax_on_phantom - Inflation, For taxable account: TIPS less attractive due to phantom income tax, For tax-deferred (IRA, 401k): TIPS attractive (no annual tax on phantom), Municipal bonds exempt from state tax, TIPS fully taxable, Recommendation: Hold TIPS in tax-deferred accounts, nominal in taxable, Liquidity considerations: TIPS market: Smaller than nominal ($1.8T vs $25T), Bid-ask spreads: 2-5bp for TIPS vs 0.5-2bp for on-the-run Treasuries, Trading volume: Lower for TIPS (harder to enter/exit large positions), Liquidity premium: TIPS may yield 5-10bp extra to compensate for illiquidity, Adjust pricing: Fair_TIPS_yield = Observed - Liquidity_premium (0.05% to 0.10%), Implementation: Breakeven calculation: BE = Nominal - (TIPS_real + Liquidity_adj), More accurate comparison, CPI forecasting: Models: Time series (ARIMA on historical CPI), Fed dots (FOMC projections), Market-based (5yr5yr forward inflation expectations), Ensemble: Average multiple forecasts, Inflation risk premium: Market breakeven includes risk premium (10-30bp), adjust: True_inflation_expectation = Breakeven - Risk_premium, API design: GET /tips/price with {cusip, settlement_date, real_yield} returns TIPS price, GET /tips/breakeven?maturity=10yr returns {nominal, tips, breakeven, recommendation}, POST /tips/trade-idea with {inflation_forecast} returns {action, expected_outperformance}, GET /tips/tax-impact with {purchase_price, inflation_rate, tax_rate} projects after-tax returns.',
    keyPoints: [
      'CPI adjustments: Index_ratio = Reference_CPI / Base_CPI (3-month lag), Adjusted_principal = Original × Index_ratio, deflation floor (never <$1,000 at maturity)',
      'Pricing: Discount projected coupons (Coupon_rate × Projected_adjusted_principal) using real yield curve, project CPI forward with inflation forecasts',
      'Breakeven: Nominal_yield - TIPS_real_yield, if expect inflation > breakeven buy TIPS, if < breakeven buy nominal, adjust for liquidity premium (5-10bp)',
      'Tax treatment: Inflation adjustment = phantom income (taxable annually without cash receipt), tax drag in taxable accounts, recommend TIPS for tax-deferred (IRA)',
      'Liquidity: TIPS less liquid (2-5bp spreads vs 0.5-2bp nominal), adjust observed yield down by liquidity premium for fair comparison, lower volume (harder to trade size)',
    ],
  },
  {
    id: 'gs-q-3',
    question:
      'Implement a Treasury auction analysis system that: (1) Fetches auction results from Treasury Direct API (auction dates, amounts, bids, stop-out yields), (2) Calculates auction metrics (bid-to-cover ratio, tail, indirect bidder %), (3) Assesses auction strength (strong vs weak demand indicators), (4) Compares stop-out yield to when-issued trading (did market expect higher/lower yield?), (5) Predicts supply impact on yields (large auctions may cheapen market). Requirements: Historical auction database (10+ years), multiple securities (Bills, Notes, Bonds, TIPS), announcement vs auction vs settlement dates. How do you handle: reopening auctions (issuing more of existing security)? Non-competitive vs competitive bids? Primary dealers (must participate, different behavior)? Market reaction (yields before vs after auction)?',
    sampleAnswer:
      'Treasury auction analysis system: Data collection: Source: Treasury Direct (treasurydirect.gov API), Auction results: Announcement date (1 week prior), Auction date (bidding day), Settlement date (T+1 or T+2), Amount offered, Total bids received, Stop-out yield (highest yield accepted), Bid-to-cover ratio, Non-competitive accepted, Competitive accepted, Primary dealer bids, Direct bidder bids, Indirect bidder bids (foreign central banks), Schema: auctions (id, security_type, maturity, auction_date, announcement_date, amount_offered, total_bids, stop_out_yield, bid_to_cover), Fetch: Daily check for new auctions, parse XML or JSON response, Historical: Store 10+ years (analyze trends in demand), Key metrics calculation: Bid-to-cover ratio: BTC = Total_bids / Amount_offered, Example: $92B bids for $38B offering = 2.42x, Strong auction: BTC > 2.5 (high demand), Weak auction: BTC < 2.0 (low demand), Trend: Compare to 6-month average BTC for same maturity, Tail: Tail = Stop_out_yield - Median_yield (or low yield), Example: Median bid = 4.25%, stop-out = 4.28%, tail = 3bp, Strong auction: Tail < 1bp (bids clustered, no desperation), Weak auction: Tail > 3bp (wide range, had to accept high yields), Zero tail: Oversubscribed at lowest yield, Indirect bidder participation: Indirect % = Indirect_bids / Total_accepted, Typical: 60-70% for 10yr (foreign central banks major buyers), Strong: >65% (international demand), Weak: <55% (foreign buyers backing off, concerning), Primary dealers: Must bid (regulatory requirement), Typical: 10-20% of allocation, If primary dealers >30%: Weak auction (no other demand, dealers stuck with inventory), Auction strength assessment: Strong auction indicators: BTC > 2.5, Tail < 1bp, Indirect > 65%, Stop-out yield < WI (when-issued) yield, Interpretation: High demand, market expects stable/lower yields ahead, Weak auction indicators: BTC < 2.0, Tail > 3bp, Indirect < 55%, Primary dealers >30%, Stop-out > WI, Interpretation: Low demand, risk of yield spike, may pressure market, Scoring system: Score = 0, BTC > 2.5: +20 points, Tail < 1bp: +20, Indirect > 65%: +20, Stop-out < WI: +20, Primary < 15%: +20, Total 100 points, >80 = Strong, 40-80 = Neutral, <40 = Weak, When-issued (WI) trading: Market trades "when-issued" securities before auction, WI yield = market expectation of stop-out yield, Comparison: If WI = 4.25% and stop-out = 4.28% (3bp tail): Market underestimated yield (weak auction), If WI = 4.30% and stop-out = 4.26%: Market overestimated (strong auction, stopped through), Data: Fetch WI yields from Bloomberg or broker quotes, Reopening auctions: Treasury issues more of existing security (same CUSIP), Increases supply of that security, existing holders may be diluted, Analysis: Compare to new issues, Reopening: Less marketing needed, existing liquidity, New issue: More demand (on-the-run premium), larger tail typical, Track: Is this first, second, or third reopening?, Supply impact on yields: Large auction: $40B+ for 10yr (above average $30B), Expected impact: Yields rise 1-3bp before auction (concession), cheaper prices to attract buyers, After auction: If strong, yields tighten back, Cumulative effect: Heavy supply week (3+ auctions totaling $80B+): Temporary yield spike (5-10bp possible), Dissipates after week as supply absorbed, Model: Regress yield_change on auction_size, supply_schedule, previous_auctions, Forecast: Next week $90B supply → expect +5bp yield rise, trade opportunity (sell before, buy after), Non-competitive bids: Retail investors: up to $10M per auction, Accept whatever yield, get allocation at stop-out, Analysis: Non-comp % typically 5-15%, If >20%: Unusual retail demand (rare), If <5%: Mostly institutional auction, Competitive bids: Specify yield and amount, Example: Bid $100M at 4.25%, Only filled if stop-out ≥ 4.25%, Higher yield bidders get priority, All pay same stop-out yield (Dutch auction), Market reaction: Pre-auction: Yields rise (concession, cheapen to attract demand), Day-of: Volatility spikes during 1pm announcement window, Post-auction: Strong → yields tighten 1-2bp, Weak → yields widen 3-5bp, fear of supply overhang, Measure: Yield change from 10am (pre) to 2pm (post auction), Correlate with auction strength score, Trading strategy: Ahead of large auction: Short Treasuries (expect higher yields/lower prices), After strong auction: Go long (demand confirmed, yields to tighten), API design: GET /auctions/upcoming returns next scheduled auctions with estimates, GET /auctions/results?cusip=XXX returns latest auction metrics, POST /auctions/analyze with {auction_id} returns {strength_score, assessment, metrics}, GET /auctions/historical?maturity=10yr&years=5 returns time series of BTC and tails.',
    keyPoints: [
      'Auction metrics: BTC = Total_bids / Offered (>2.5 strong, <2.0 weak), Tail = Stop_out - Median (< 1bp strong, >3bp weak), Indirect% (>65% strong, <55% weak)',
      'Strength assessment: Score from BTC, Tail, Indirect%, Stop-out vs WI, Primary dealer%, 100-point scale (>80 strong, <40 weak), compare to 6mo avg',
      'When-issued: Market trades pre-auction, WI yield = expectation, compare to stop-out (beat WI = strong, miss WI = weak), fetch from Bloomberg/brokers',
      'Supply impact: Large auctions (>$40B for 10yr) cause 1-3bp concession before, heavy weeks (+$80B) cause 5-10bp temporary spike, trade opportunity (sell before/buy after)',
      'Reopening: Issuing more of existing CUSIP, less marketing needed, existing liquidity, smaller tail vs new issue, track frequency (1st/2nd/3rd reopening affects demand)',
    ],
  },
];

